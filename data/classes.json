{
    "sleep": {
        "name": "sleep",
        "type": "function",
        "doc": "Sleeps for a number of seconds",
        "returns": "nil",
        "args": {
            "time": {
                "name": "time",
                "type": "number",
                "doc": "The number of seconds to sleep"
            }
        }
    },
    "bit": {
        "name": "bit",
        "type": "field",
        "doc": "Bit manipulation API",
        "inherits": [],
        "properties": {
            "blshift": {
                "name": "blshift",
                "type": "function",
                "returns": "number",
                "doc": "Shifts bits left.",
                "args": {
                    "n": {
                        "name": "n",
                        "type": "number",
                        "doc": "Number to shift"
                    },
                    "bits": {
                        "name": "bits",
                        "type": "number",
                        "doc": "Number of bits to shift by"
                    }
                }
            },
            "brshift": {
                "name": "brshift",
                "type": "function",
                "doc": "Shifts bits right arithmetically.",
                "returns": "number",
                "args": {
                    "n": {
                        "name": "n",
                        "type": "number",
                        "doc": "Number to shift"
                    },
                    "bits": {
                        "name": "bits",
                        "type": "number",
                        "doc": "Number of bits to shift by"
                    }
                }
            },
            "blogic_rshift": {
                "name": "blogic_rshift",
                "type": "function",
                "doc": "Shifts bits right logically.",
                "returns": "number",
                "args": {
                    "n": {
                        "name": "n",
                        "type": "number",
                        "doc": "Number to shift"
                    },
                    "bits": {
                        "name": "bits",
                        "type": "number",
                        "doc": "Number of bits to shift by"
                    }
                }
            },
            "bxor": {
                "name": "bxor",
                "type": "function",
                "doc": "Performs an exclusive OR on two numbers.",
                "returns": "number",
                "args": {
                    "n": {
                        "name": "n",
                        "type": "number",
                        "doc": "First number"
                    },
                    "m": {
                        "name": "m",
                        "type": "number",
                        "doc": "Second number"
                    }
                }
            },
            "bor": {
                "name": "bor",
                "type": "function",
                "doc": "Performs an OR on two numbers.",
                "returns": "number",
                "args": {
                    "n": {
                        "name": "n",
                        "type": "number",
                        "doc": "First number"
                    },
                    "m": {
                        "name": "m",
                        "type": "number",
                        "doc": "Second number"
                    }
                }
            },
            "band": {
                "name": "band",
                "type": "function",
                "doc": "Performs an AND on two numbers.",
                "returns": "number",
                "args": {
                    "n": {
                        "name": "n",
                        "type": "number",
                        "doc": "First number"
                    },
                    "m": {
                        "name": "m",
                        "type": "number",
                        "doc": "Second number"
                    }
                }
            },
            "bnot": {
                "name": "bnot",
                "type": "function",
                "doc": "Performs a NOT on a number.",
                "returns": "number",
                "args": {
                    "n": {
                        "name": "n",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            }
        }
    },
    "colors": {
        "name": "colors",
        "type": "field",
        "inherits": [],
        "doc": "Provides constants for colors.",
        "properties": {
            "combine": {
                "name": "combine",
                "type": "function",
                "doc": "Combines one or more colors (or sets of colors) into a larger set.",
                "returns": "color",
                "args": {
                    "color1": {
                        "name": "color1",
                        "type": "color",
                        "doc": "First color"
                    },
                    "color2": {
                        "name": "color2",
                        "type": "color",
                        "doc": "Second color"
                    },
                    "...": {
                        "name": "...",
                        "type": "color",
                        "doc": "Other colors"
                    }
                }
            },
            "subtract": {
                "name": "subtract",
                "type": "function",
                "doc": "Removes one or more colors (or sets of colors) from an initial set.",
                "returns": "color",
                "args": {
                    "colors": {
                        "name": "colors",
                        "type": "color",
                        "doc": "Combined color"
                    },
                    "color1": {
                        "name": "color1",
                        "type": "color",
                        "doc": "First color"
                    },
                    "...": {
                        "name": "...",
                        "type": "color",
                        "doc": "Other colors"
                    }
                }
            },
            "test": {
                "name": "test",
                "type": "function",
                "doc": "Tests whether color is contained within colors.",
                "returns": "boolean",
                "args": {
                    "colors": {
                        "name": "colors",
                        "type": "color",
                        "doc": "A set of colors"
                    },
                    "color": {
                        "name": "color",
                        "type": "color",
                        "doc": "The color to test for"
                    }
                }
            },
            "packRGB": {
                "name": "packRGB",
                "type": "function",
                "doc": "Combines a three-color RGB value into one hexadecimal representation. (CC:T)",
                "returns": "number",
                "args": {
                    "r": {
                        "name": "r",
                        "type": "number",
                        "doc": "The red value, from 0.0 to 1.0."
                    },
                    "g": {
                        "name": "g",
                        "type": "number",
                        "doc": "The green value, from 0.0 to 1.0."
                    },
                    "b": {
                        "name": "b",
                        "type": "number",
                        "doc": "The blue value, from 0.0 to 1.0."
                    }
                }
            },
            "unpackRGB": {
                "name": "unpackRGB",
                "type": "function",
                "doc": "Separates a hexadecimal RGB color into its three constituent channels. (CC:T)",
                "returns": "number, number, number",
                "args": {
                    "rgb": {
                        "name": "rgb",
                        "type": "number",
                        "doc": "The RGB hex value to unpack."
                    }
                }
            },
            "toBlit": {
                "name": "toBlit",
                "type": "function",
                "doc": "Converts the given color to a paint/blit hex character (0-9, a-f). (CC:T 1.94+)",
                "returns": "string",
                "args": {
                    "color": {
                        "name": "color",
                        "type": "color",
                        "doc": "The color to convert."
                    }
                }
            },
            "white": {
                "name": "white",
                "type": "color",
                "doc": "White"
            },
            "orange": {
                "name": "orange",
                "type": "color",
                "doc": "Orange"
            },
            "magenta": {
                "name": "magenta",
                "type": "color",
                "doc": "Magenta"
            },
            "lightBlue": {
                "name": "lightBlue",
                "type": "color",
                "doc": "Light blue"
            },
            "yellow": {
                "name": "yellow",
                "type": "color",
                "doc": "Yellow"
            },
            "lime": {
                "name": "lime",
                "type": "color",
                "doc": "Lime"
            },
            "pink": {
                "name": "pink",
                "type": "color",
                "doc": "Pink"
            },
            "gray": {
                "name": "gray",
                "type": "color",
                "doc": "Gray"
            },
            "lightGray": {
                "name": "lightGray",
                "type": "color",
                "doc": "Light gray"
            },
            "cyan": {
                "name": "cyan",
                "type": "color",
                "doc": "Cyan"
            },
            "purple": {
                "name": "purple",
                "type": "color",
                "doc": "Purple"
            },
            "blue": {
                "name": "blue",
                "type": "color",
                "doc": "Blue"
            },
            "brown": {
                "name": "brown",
                "type": "color",
                "doc": "Brown"
            },
            "green": {
                "name": "green",
                "type": "color",
                "doc": "Green"
            },
            "red": {
                "name": "red",
                "type": "color",
                "doc": "Red"
            },
            "black": {
                "name": "black",
                "type": "color",
                "doc": "Black"
            }
        }
    },
    "colours": {
        "name": "colours",
        "type": "field",
        "inherits": [],
        "doc": "Provides constants for colours (UK)",
        "properties": {
            "combine": {
                "name": "combine",
                "type": "function",
                "doc": "Combines one or more colours (or sets of colours) into a larger set.",
                "returns": "color",
                "args": {
                    "colour1": {
                        "name": "colour1",
                        "type": "color",
                        "doc": "First colour"
                    },
                    "colour2": {
                        "name": "colour2",
                        "type": "color",
                        "doc": "Second colour"
                    },
                    "...": {
                        "name": "...",
                        "type": "color",
                        "doc": "Other colours"
                    }
                }
            },
            "subtract": {
                "name": "subtract",
                "type": "function",
                "doc": "Removes one or more colours (or sets of colours) from an initial set.",
                "returns": "color",
                "args": {
                    "colours": {
                        "name": "colours",
                        "type": "color",
                        "doc": "Combined colour"
                    },
                    "colour1": {
                        "name": "colour1",
                        "type": "color",
                        "doc": "First colour"
                    },
                    "...": {
                        "name": "...",
                        "type": "color",
                        "doc": "Other colours"
                    }
                }
            },
            "test": {
                "name": "test",
                "type": "function",
                "doc": "Tests whether colour is contained within colours.",
                "returns": "boolean",
                "args": {
                    "colors": {
                        "name": "colours",
                        "type": "color",
                        "doc": "A set of colours"
                    },
                    "color": {
                        "name": "colour",
                        "type": "color",
                        "doc": "The colour to test for"
                    }
                }
            },
            "packRGB": {
                "name": "packRGB",
                "type": "function",
                "doc": "Combines a three-colour RGB value into one hexadecimal representation. (CC:T)",
                "returns": "number",
                "args": {
                    "r": {
                        "name": "r",
                        "type": "number",
                        "doc": "The red value, from 0.0 to 1.0."
                    },
                    "g": {
                        "name": "g",
                        "type": "number",
                        "doc": "The green value, from 0.0 to 1.0."
                    },
                    "b": {
                        "name": "b",
                        "type": "number",
                        "doc": "The blue value, from 0.0 to 1.0."
                    }
                }
            },
            "unpackRGB": {
                "name": "unpackRGB",
                "type": "function",
                "doc": "Separates a hexadecimal RGB colour into its three constituent channels. (CC:T)",
                "returns": "number, number, number",
                "args": {
                    "rgb": {
                        "name": "rgb",
                        "type": "number",
                        "doc": "The RGB hex value to unpack."
                    }
                }
            },
            "toBlit": {
                "name": "toBlit",
                "type": "function",
                "doc": "Converts the given colour to a paint/blit hex character (0-9, a-f). (CC:T 1.94+)",
                "returns": "string",
                "args": {
                    "colour": {
                        "name": "colour",
                        "type": "color",
                        "doc": "The colour to convert."
                    }
                }
            },
            "white": {
                "name": "white",
                "type": "color",
                "doc": "White"
            },
            "orange": {
                "name": "orange",
                "type": "color",
                "doc": "Orange"
            },
            "magenta": {
                "name": "magenta",
                "type": "color",
                "doc": "Magenta"
            },
            "lightBlue": {
                "name": "lightBlue",
                "type": "color",
                "doc": "Light blue"
            },
            "yellow": {
                "name": "yellow",
                "type": "color",
                "doc": "Yellow"
            },
            "lime": {
                "name": "lime",
                "type": "color",
                "doc": "Lime"
            },
            "pink": {
                "name": "pink",
                "type": "color",
                "doc": "Pink"
            },
            "grey": {
                "name": "grey",
                "type": "color",
                "doc": "Grey"
            },
            "lightGrey": {
                "name": "lightGrey",
                "type": "color",
                "doc": "Light grey"
            },
            "cyan": {
                "name": "cyan",
                "type": "color",
                "doc": "Cyan"
            },
            "purple": {
                "name": "purple",
                "type": "color",
                "doc": "Purple"
            },
            "blue": {
                "name": "blue",
                "type": "color",
                "doc": "Blue"
            },
            "brown": {
                "name": "brown",
                "type": "color",
                "doc": "Brown"
            },
            "green": {
                "name": "green",
                "type": "color",
                "doc": "Green"
            },
            "red": {
                "name": "red",
                "type": "color",
                "doc": "Red"
            },
            "black": {
                "name": "black",
                "type": "color",
                "doc": "Black"
            }
        }
    },
    "commands": {
        "name": "commands",
        "type": "field",
        "inherits": [],
        "doc": "Command computers only: allows executing Minecraft commands. (1.7+)",
        "properties": {
            "exec": {
                "name": "exec",
                "type": "function",
                "doc": "Executes a command string synchronously.",
                "returns": "boolean, table",
                "args": {
                    "command": {
                        "name": "command",
                        "type": "string",
                        "doc": "The command string to run"
                    }
                }
            },
            "execAsync": {
                "name": "execAsync",
                "type": "function",
                "doc": "Executes a command string asynchronously.",
                "returns": "number",
                "args": {
                    "command": {
                        "name": "command",
                        "type": "string",
                        "doc": "The command string to run"
                    }
                }
            },
            "list": {
                "name": "list",
                "type": "function",
                "doc": "Returns a list of commands.",
                "returns": "table",
                "args": {}
            },
            "getBlockPosition": {
                "name": "getBlockPosition",
                "type": "function",
                "doc": "Returns the world position of the computer.",
                "returns": "number, number, number",
                "args": {}
            },
            "getBlockInfo": {
                "name": "getBlockInfo",
                "type": "function",
                "doc": "Returns information about the block at a position.",
                "returns": "table",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "X coordinate"
                    },
                    "y": {
                        "name": "y",
                        "type": "number",
                        "doc": "Y coordinate"
                    },
                    "z": {
                        "name": "z",
                        "type": "number",
                        "doc": "Z coordinate"
                    }
                }
            },
            "getBlockInfos": {
                "name": "getBlockInfos",
                "type": "function",
                "doc": "Returns information about blocks between two positions.",
                "returns": "table",
                "args": {
                    "x1": {
                        "name": "x1",
                        "type": "number",
                        "doc": "First X coordinate"
                    },
                    "y1": {
                        "name": "y1",
                        "type": "number",
                        "doc": "First Y coordinate"
                    },
                    "z1": {
                        "name": "z1",
                        "type": "number",
                        "doc": "First Z coordinate"
                    },
                    "x2": {
                        "name": "x2",
                        "type": "number",
                        "doc": "Second X coordinate"
                    },
                    "y2": {
                        "name": "y2",
                        "type": "number",
                        "doc": "Second Y coordinate"
                    },
                    "z2": {
                        "name": "z2",
                        "type": "number",
                        "doc": "Second Z coordinate"
                    }
                }
            }
        }
    },
    "coroutine": {
        "name": "coroutine",
        "type": "field",
        "doc": "Creates and manages parallel tasks.",
        "inherits": [],
        "properties": {
            "create": {
                "name": "create",
                "type": "function",
                "doc": "Creates a coroutine.",
                "returns": "coroutine",
                "args": {
                    "f": {
                        "name": "f",
                        "type": "function",
                        "doc": "The function to run"
                    }
                }
            },
            "resume": {
                "name": "resume",
                "type": "function",
                "doc": "Starts or resumes a coroutine.",
                "returns": "any",
                "args": {
                    "coro": {
                        "name": "coro",
                        "type": "coroutine",
                        "doc": "The coroutine to resume"
                    },
                    "...": {
                        "name": "...",
                        "type": "any",
                        "doc": "Any parameters to pass to the function, or values to return from coroutine.yield()"
                    }
                }
            },
            "running": {
                "name": "running",
                "type": "function",
                "doc": "Returns the currently running coroutine.",
                "returns": "coroutine",
                "args": {}
            },
            "status": {
                "name": "status",
                "type": "function",
                "doc": "Returns the status of a coroutine.",
                "returns": "string",
                "args": {
                    "coro": {
                        "name": "coro",
                        "type": "coroutine",
                        "doc": "The coroutine to check"
                    }
                }
            },
            "wrap": {
                "name": "wrap",
                "type": "function",
                "doc": "Wraps a coroutine in a function.",
                "returns": "function",
                "args": {
                    "f": {
                        "name": "f",
                        "type": "function",
                        "doc": "The function to run"
                    }
                }
            },
            "yield": {
                "name": "yield",
                "type": "function",
                "doc": "Pauses the current coroutine and returns execution to the caller.",
                "returns": "any",
                "args": {
                    "...": {
                        "name": "...",
                        "type": "any",
                        "doc": "Any values to return from coroutine.resume()"
                    }
                }
            }
        }
    },
    "disk": {
        "name": "disk",
        "type": "field",
        "inherits": [],
        "doc": "Allows accessing data about disk drives.",
        "properties": {
            "isPresent": {
                "name": "isPresent",
                "type": "function",
                "doc": "Returns whether an item is in the drive.",
                "returns": "boolean",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "hasData": {
                "name": "hasData",
                "type": "function",
                "doc": "Returns whether a floppy disk is in the drive.",
                "returns": "boolean",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "getMountPath": {
                "name": "getMountPath",
                "type": "function",
                "doc": "Returns the mount point of the disk.",
                "returns": "string/nil",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "setLabel": {
                "name": "setLabel",
                "type": "function",
                "doc": "Sets the label of a disk.",
                "returns": "nil",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    },
                    "label": {
                        "name": "label",
                        "type": "string",
                        "doc": "The name of the disk"
                    }
                }
            },
            "getLabel": {
                "name": "getLabel",
                "type": "function",
                "doc": "Returns the label of a floppy disk.",
                "returns": "string/nil",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "getID": {
                "name": "getID",
                "type": "function",
                "doc": "Returns the ID of a disk.",
                "returns": "number/nil",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "hasAudio": {
                "name": "hasAudio",
                "type": "function",
                "doc": "Returns whether a music disc is in the drive.",
                "returns": "boolean",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "getAudioTitle": {
                "name": "getAudioTitle",
                "type": "function",
                "doc": "Returns the name of the music disc inserted.",
                "returns": "string/nil",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "playAudio": {
                "name": "playAudio",
                "type": "function",
                "doc": "Plays the music disc in the drive.",
                "returns": "nil",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "stopAudio": {
                "name": "stopAudio",
                "type": "function",
                "doc": "Stops the music disc in the drive.",
                "returns": "nil",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "eject": {
                "name": "eject",
                "type": "function",
                "doc": "Ejects the object from the drive.",
                "returns": "nil",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            }
        }
    },
    "fs": {
        "name": "fs",
        "type": "field",
        "inherits": [],
        "doc": "Allows performing operations on files and directories.",
        "properties": {
            "list": {
                "name": "list",
                "type": "function",
                "doc": "Returns a list of files and folders in a directory.",
                "returns": "table",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The path to query"
                    }
                }
            },
            "exists": {
                "name": "exists",
                "type": "function",
                "doc": "Checks whether the path exists.",
                "returns": "boolean",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The path to query"
                    }
                }
            },
            "isDir": {
                "name": "isDir",
                "type": "function",
                "doc": "Checks whether the path is a directory.",
                "returns": "boolean",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The path to query"
                    }
                }
            },
            "isReadOnly": {
                "name": "isReadOnly",
                "type": "function",
                "doc": "Checks whether the path is read only.",
                "returns": "boolean",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The path to query"
                    }
                }
            },
            "getName": {
                "name": "getName",
                "type": "function",
                "doc": "Returns the basename of the path.",
                "returns": "string",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The path to query"
                    }
                }
            },
            "getDrive": {
                "name": "getDrive",
                "type": "function",
                "returns": "string/nil",
                "doc": "Returns the storage medium holding a path.",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The path to query"
                    }
                }
            },
            "getSize": {
                "name": "getSize",
                "type": "function",
                "returns": "number",
                "doc": "Returns the size of a file in bytes.",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The path to query"
                    }
                }
            },
            "getFreeSpace": {
                "name": "getFreeSpace",
                "type": "function",
                "returns": "number",
                "doc": "Returns the space available in the directory.",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The path to query"
                    }
                }
            },
            "makeDir": {
                "name": "makeDir",
                "type": "function",
                "returns": "nil",
                "doc": "Creates a directory at the path, creating parents as needed.",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The path to create"
                    }
                }
            },
            "move": {
                "name": "move",
                "type": "function",
                "returns": "nil",
                "doc": "Moves a file or directory to a new location.",
                "args": {
                    "fromPath": {
                        "name": "fromPath",
                        "type": "string",
                        "doc": "The source path"
                    },
                    "toPath": {
                        "name": "toPath",
                        "type": "string",
                        "doc": "The destination path"
                    }
                }
            },
            "copy": {
                "name": "copy",
                "type": "function",
                "returns": "nil",
                "doc": "Copies a file or directory to a new location.",
                "args": {
                    "fromPath": {
                        "name": "fromPath",
                        "type": "string",
                        "doc": "The source path"
                    },
                    "toPath": {
                        "name": "toPath",
                        "type": "string",
                        "doc": "The destination path"
                    }
                }
            },
            "delete": {
                "name": "delete",
                "type": "function",
                "returns": "nil",
                "doc": "Deletes a file or directory.",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The path to delete"
                    }
                }
            },
            "combine": {
                "name": "combine",
                "type": "function",
                "returns": "string",
                "doc": "Combines two path components, so that the second path is nested inside the first.",
                "args": {
                    "basePath": {
                        "name": "basePath",
                        "type": "string",
                        "doc": "The base path"
                    },
                    "localPath": {
                        "name": "localPath",
                        "type": "string",
                        "doc": "The local path"
                    }
                }
            },
            "open": {
                "name": "open",
                "type": "function",
                "returns": "table",
                "doc": "Opens a file for reading or writing.",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The file to open"
                    },
                    "mode": {
                        "name": "mode",
                        "type": "string",
                        "doc": "The mode to open the file in (r/w/a[b])"
                    }
                }
            },
            "find": {
                "name": "find",
                "type": "function",
                "returns": "table",
                "doc": "Searches the filesystem for files matching a pattern, and returns a list of results. (1.6+)",
                "args": {
                    "wildcard": {
                        "name": "wildcard",
                        "type": "string",
                        "doc": "The pattern to match against"
                    }
                }
            },
            "getDir": {
                "name": "getDir",
                "type": "function",
                "returns": "string",
                "doc": "Returns the parent directory of a path. (1.63+)",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The path to query"
                    }
                }
            },
            "complete": {
                "name": "complete",
                "type": "function",
                "returns": "table",
                "doc": "Returns a list of possible completions for a directory and a partial name. (1.74+)",
                "args": {
                    "partial name": {
                        "name": "partial name",
                        "type": "string",
                        "doc": "The first part of a filename"
                    },
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The path to complete from"
                    },
                    "[include files]": {
                        "name": "[include files]",
                        "type": "boolean",
                        "doc": "Whether to include files (optional)"
                    },
                    "[include slashes]": {
                        "name": "[include slashes]",
                        "type": "boolean",
                        "doc": "Whether to include slashes (optional)"
                    }
                }
            },
            "isDriveRoot": {
                "name": "isDriveRoot",
                "type": "function",
                "returns": "boolean",
                "doc": "Returns true if a path is mounted to the parent filesystem. (CC:T 1.88+)",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The path to check"
                    }
                }
            },
            "getCapacity": {
                "name": "getCapacity",
                "type": "function",
                "returns": "number",
                "doc": "Returns the amount of free space (in bytes) available on the drive the path is located on. (CC:T 1.87+)",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The path to get the capacity of"
                    }
                }
            },
            "attributes": {
                "name": "attributes",
                "type": "function",
                "returns": "table",
                "doc": "Gets attributes about a specific file or folder. (CC:T 1.87+)",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The path to get attributes for"
                    }
                }
            }
        }
    },
    "gps": {
        "name": "gps",
        "type": "field",
        "inherits": [],
        "doc": "Allows locating the position of a computer or turtle via trilateration over rednet.",
        "properties": {
            "locate": {
                "name": "locate",
                "type": "function",
                "doc": "Locates the current computer or turtle if possible.",
                "returns": "number, number, number; or nil",
                "args": {
                    "[timeout]": {
                        "name": "[timeout]",
                        "type": "number",
                        "doc": "The maximim amount of time to wait for a response, defaults to 2"
                    },
                    "[debug]": {
                        "name": "[debug]",
                        "type": "boolean",
                        "doc": "Whether to print debug messages (optional)"
                    }
                }
            }
        }
    },
    "help": {
        "name": "help",
        "type": "field",
        "inherits": [],
        "doc": "Provides functions for viewing help documents.",
        "properties": {
            "path": {
                "name": "path",
                "type": "function",
                "doc": "Returns a string listing the directories to search for help topics in, separated by colons.",
                "returns": "string",
                "args": {}
            },
            "setPath": {
                "name": "setPath",
                "type": "function",
                "doc": "Sets the paths to search for help topics.",
                "returns": "nil",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The paths to search for help topics, separated by colons"
                    }
                }
            },
            "lookup": {
                "name": "lookup",
                "type": "function",
                "doc": "Returns the path to the file containing a help topic.",
                "returns": "string/nil",
                "args": {
                    "topic": {
                        "name": "topic",
                        "type": "string",
                        "doc": "The topic to search for"
                    }
                }
            },
            "topics": {
                "name": "topics",
                "type": "function",
                "doc": "Returns a list of help topics available.",
                "returns": "table",
                "args": {}
            },
            "completeTopic": {
                "name": "completeTopic",
                "type": "function",
                "doc": "Returns a list of suffixes that can be appended to the prefix to create a topic name. (1.74+)",
                "returns": "table",
                "args": {
                    "topic prefix": {
                        "name": "topic prefix",
                        "type": "string",
                        "doc": "The beginning of a topic name"
                    }
                }
            }
        }
    },
    "http": {
        "name": "http",
        "type": "field",
        "inherits": [],
        "doc": "Allows accessing the internet through HTTP requests.",
        "properties": {
            "request": {
                "name": "request",
                "type": "function",
                "doc": "Asynchronously sends an HTTP request.",
                "returns": "nil",
                "args": {
                    "url": {
                        "name": "url",
                        "type": "string",
                        "doc": "The URL to send the request to"
                    },
                    "[postData]": {
                        "name": "[postData]",
                        "type": "string",
                        "doc": "Any data to send in a POST request, set to nil to send a GET request (optional)"
                    },
                    "[headers]": {
                        "name": "[headers]",
                        "type": "table",
                        "doc": "The headers to set in the request (optional)"
                    },
                    "[binary]": {
                        "name": "[binary]",
                        "type": "boolean",
                        "doc": "Whether to send a binary request (optional) (CC 1.8+)"
                    },
                    "[redirect]": {
                        "name": "[redirect]",
                        "type": "boolean",
                        "doc": "Whether to automatically redirect on HTTP 300 responses (optional) (CC 1.8+)"
                    }
                }
            },
            "get": {
                "name": "get",
                "type": "function",
                "doc": "Synchronously sends an HTTP GET request, and returns a file handle.",
                "returns": "table | nil, string[, table]",
                "args": {
                    "url": {
                        "name": "url",
                        "type": "string",
                        "doc": "The URL to send the request to"
                    },
                    "[headers]": {
                        "name": "[headers]",
                        "type": "table",
                        "doc": "The headers to set in the request (optional)"
                    },
                    "[binary]": {
                        "name": "[binary]",
                        "type": "boolean",
                        "doc": "Whether to send a binary request (optional) (CC 1.8+)"
                    },
                    "[redirect]": {
                        "name": "[redirect]",
                        "type": "boolean",
                        "doc": "Whether to automatically redirect on HTTP 300 responses (optional) (CC 1.8+)"
                    }
                }
            },
            "post": {
                "name": "post",
                "type": "function",
                "doc": "Synchronously sends an HTTP POST request, and returns a file handle.",
                "returns": "table | nil, string[, table]",
                "args": {
                    "url": {
                        "name": "url",
                        "type": "string",
                        "doc": "The URL to send the request to"
                    },
                    "postData": {
                        "name": "postData",
                        "type": "string",
                        "doc": "The data to send"
                    },
                    "[headers]": {
                        "name": "[headers]",
                        "type": "table",
                        "doc": "The headers to set in the request (optional)"
                    },
                    "[binary]": {
                        "name": "[binary]",
                        "type": "boolean",
                        "doc": "Whether to send a binary request (optional) (CC 1.8+)"
                    },
                    "[redirect]": {
                        "name": "[redirect]",
                        "type": "boolean",
                        "doc": "Whether to automatically redirect on HTTP 300 responses (optional) (CC 1.8+)"
                    }
                }
            },
            "checkURL": {
                "name": "checkURL",
                "type": "function",
                "doc": "Checks if a URL is valid and in the whitelist.",
                "returns": "boolean[, string]",
                "args": {
                    "url": {
                        "name": "url",
                        "type": "string",
                        "doc": "The URL to check"
                    }
                }
            },
            "checkURLAsync": {
                "name": "checkURLAsync",
                "type": "function",
                "doc": "Asynchronously hecks if a URL is valid and in the whitelist.",
                "returns": "nil",
                "args": {
                    "url": {
                        "name": "url",
                        "type": "string",
                        "doc": "The URL to check"
                    }
                }
            },
            "websocket": {
                "name": "websocket",
                "type": "function",
                "doc": "Opens a websocket. (CC:T)",
                "returns": "table | nil, string",
                "args": {
                    "url": {
                        "name": "url",
                        "type": "string",
                        "doc": "The URL to connect to"
                    },
                    "[headers]": {
                        "name": "[headers]",
                        "type": "table",
                        "doc": "Any headers to send in the HTTP request"
                    }
                }
            },
            "websocketAsync": {
                "name": "websocketAsync",
                "type": "function",
                "doc": "Asynchronously opens a websocket. (CC:T)",
                "returns": "nil",
                "args": {
                    "url": {
                        "name": "url",
                        "type": "string",
                        "doc": "The URL to connect to"
                    },
                    "[headers]": {
                        "name": "[headers]",
                        "type": "table",
                        "doc": "Any headers to send in the HTTP request"
                    }
                }
            }
        }
    },
    "io": {
        "name": "io",
        "type": "field",
        "inherits": [],
        "doc": "Default Lua IO API",
        "properties": {
            "close": {
                "name": "close",
                "type": "function",
                "doc": "Closes a file handle.",
                "returns": "nil",
                "args": {
                    "[file]": {
                        "name": "[file]",
                        "type": "table",
                        "doc": "The file to operate on (nil for default output file)"
                    }
                }
            },
            "flush": {
                "name": "flush",
                "type": "function",
                "doc": "Flushes the current output file.",
                "returns": "nil",
                "args": {}
            },
            "input": {
                "name": "input",
                "type": "function",
                "doc": "Either opens a filename and sets the default input file handle, sets the defualt input handle to the handle passed in, or returns the current input handle.",
                "returns": "table/nil",
                "args": {
                    "[file]": {
                        "name": "[file]",
                        "type": "string/table",
                        "doc": "The file name or file handle to operate on, or nil to return the input file"
                    }
                }
            },
            "lines": {
                "name": "lines",
                "type": "function",
                "doc": "Returns an iterator function that returns each line in a file.",
                "returns": "function",
                "args": {
                    "[filename]": {
                        "name": "[filename]",
                        "type": "string",
                        "doc": "The filename to open, or nil for the default input file"
                    }
                }
            },
            "open": {
                "name": "open",
                "type": "function",
                "doc": "Opens a file for reading or writing.",
                "returns": "table/(nil, string)",
                "args": {
                    "filename": {
                        "name": "filename",
                        "type": "string",
                        "doc": "The file to open"
                    },
                    "[mode]": {
                        "name": "[mode]",
                        "type": "string",
                        "doc": "The mode to open the file in (r/w/a) (optional)"
                    }
                }
            },
            "output": {
                "name": "output",
                "type": "function",
                "doc": "Either opens a filename and sets the default output file handle, sets the defualt output handle to the handle passed in, or returns the current output handle.",
                "returns": "table/nil",
                "args": {
                    "[file]": {
                        "name": "[file]",
                        "type": "string/table",
                        "doc": "The file name or file handle to operate on, or nil to return the output file"
                    }
                }
            },
            "read": {
                "name": "read",
                "type": "function",
                "doc": "Reads the next line from the input file.",
                "returns": "string/nil...",
                "args": {
                    "...": {
                        "name": "...",
                        "type": "string",
                        "doc": "*l for each line that will be read"
                    }
                }
            },
            "type": {
                "name": "type",
                "type": "function",
                "doc": "Returns \"file\" if obj is an open file, \"closed file\" if obj is a closed file, or nil.",
                "returns": "string/nil",
                "args": {
                    "obj": {
                        "name": "obj",
                        "type": "any",
                        "doc": "The object to check"
                    }
                }
            },
            "write": {
                "name": "write",
                "type": "function",
                "doc": "Writes a string or number to the default output.",
                "returns": "nil",
                "args": {
                    "str": {
                        "name": "str",
                        "type": "string/number",
                        "doc": "The string or number to write"
                    }
                }
            }
        }
    },
    "keys": {
        "name": "keys",
        "type": "field",
        "inherits": [],
        "doc": "Provides constants for key codes.",
        "properties": {
            "getName": {
                "name": "getName",
                "type": "function",
                "doc": "Returns a human-readable string for the key code.",
                "returns": "string",
                "args": {
                    "code": {
                        "name": "code",
                        "type": "number",
                        "doc": "The key code to translate"
                    }
                }
            },
            "a": {
                "name": "a",
                "type": "number",
                "doc": "a"
            },
            "b": {
                "name": "b",
                "type": "number",
                "doc": "b"
            },
            "c": {
                "name": "c",
                "type": "number",
                "doc": "c"
            },
            "d": {
                "name": "d",
                "type": "number",
                "doc": "d"
            },
            "e": {
                "name": "e",
                "type": "number",
                "doc": "e"
            },
            "f": {
                "name": "f",
                "type": "number",
                "doc": "f"
            },
            "g": {
                "name": "g",
                "type": "number",
                "doc": "g"
            },
            "h": {
                "name": "h",
                "type": "number",
                "doc": "h"
            },
            "i": {
                "name": "i",
                "type": "number",
                "doc": "i"
            },
            "j": {
                "name": "j",
                "type": "number",
                "doc": "j"
            },
            "k": {
                "name": "k",
                "type": "number",
                "doc": "k"
            },
            "l": {
                "name": "l",
                "type": "number",
                "doc": "l"
            },
            "m": {
                "name": "m",
                "type": "number",
                "doc": "m"
            },
            "n": {
                "name": "n",
                "type": "number",
                "doc": "n"
            },
            "o": {
                "name": "o",
                "type": "number",
                "doc": "o"
            },
            "p": {
                "name": "p",
                "type": "number",
                "doc": "p"
            },
            "q": {
                "name": "q",
                "type": "number",
                "doc": "q"
            },
            "r": {
                "name": "r",
                "type": "number",
                "doc": "r"
            },
            "s": {
                "name": "s",
                "type": "number",
                "doc": "s"
            },
            "t": {
                "name": "t",
                "type": "number",
                "doc": "t"
            },
            "u": {
                "name": "u",
                "type": "number",
                "doc": "u"
            },
            "v": {
                "name": "v",
                "type": "number",
                "doc": "v"
            },
            "w": {
                "name": "w",
                "type": "number",
                "doc": "w"
            },
            "x": {
                "name": "x",
                "type": "number",
                "doc": "x"
            },
            "y": {
                "name": "y",
                "type": "number",
                "doc": "y"
            },
            "z": {
                "name": "z",
                "type": "number",
                "doc": "z"
            },
            "one": {
                "name": "one",
                "type": "number",
                "doc": "one"
            },
            "two": {
                "name": "two",
                "type": "number",
                "doc": "two"
            },
            "three": {
                "name": "three",
                "type": "number",
                "doc": "three"
            },
            "four": {
                "name": "four",
                "type": "number",
                "doc": "four"
            },
            "five": {
                "name": "five",
                "type": "number",
                "doc": "five"
            },
            "six": {
                "name": "six",
                "type": "number",
                "doc": "six"
            },
            "seven": {
                "name": "seven",
                "type": "number",
                "doc": "seven"
            },
            "eight": {
                "name": "eight",
                "type": "number",
                "doc": "eight"
            },
            "nine": {
                "name": "nine",
                "type": "number",
                "doc": "nine"
            },
            "zero": {
                "name": "zero",
                "type": "number",
                "doc": "zero"
            },
            "minus": {
                "name": "minus",
                "type": "number",
                "doc": "minus"
            },
            "equals": {
                "name": "equals",
                "type": "number",
                "doc": "equals"
            },
            "backspace": {
                "name": "backspace",
                "type": "number",
                "doc": "backspace"
            },
            "tab": {
                "name": "tab",
                "type": "number",
                "doc": "tab"
            },
            "leftBracket": {
                "name": "leftBracket",
                "type": "number",
                "doc": "leftBracket"
            },
            "rightBracket": {
                "name": "rightBracket",
                "type": "number",
                "doc": "rightBracket"
            },
            "enter": {
                "name": "enter",
                "type": "number",
                "doc": "enter"
            },
            "leftCtrl": {
                "name": "leftCtrl",
                "type": "number",
                "doc": "leftCtrl"
            },
            "semiColon": {
                "name": "semiColon",
                "type": "number",
                "doc": "semiColon"
            },
            "apostrophe": {
                "name": "apostrophe",
                "type": "number",
                "doc": "apostrophe"
            },
            "grave": {
                "name": "grave",
                "type": "number",
                "doc": "grave"
            },
            "leftShift": {
                "name": "leftShift",
                "type": "number",
                "doc": "leftShift"
            },
            "backslash": {
                "name": "backslash",
                "type": "number",
                "doc": "backslash"
            },
            "comma": {
                "name": "comma",
                "type": "number",
                "doc": "comma"
            },
            "period": {
                "name": "period",
                "type": "number",
                "doc": "period"
            },
            "slash": {
                "name": "slash",
                "type": "number",
                "doc": "slash"
            },
            "rightShift": {
                "name": "rightShift",
                "type": "number",
                "doc": "rightShift"
            },
            "multiply": {
                "name": "multiply",
                "type": "number",
                "doc": "multiply"
            },
            "leftAlt": {
                "name": "leftAlt",
                "type": "number",
                "doc": "leftAlt"
            },
            "space": {
                "name": "space",
                "type": "number",
                "doc": "space"
            },
            "capsLock": {
                "name": "capsLock",
                "type": "number",
                "doc": "capsLock"
            },
            "f1": {
                "name": "f1",
                "type": "number",
                "doc": "f1"
            },
            "f2": {
                "name": "f2",
                "type": "number",
                "doc": "f2"
            },
            "f3": {
                "name": "f3",
                "type": "number",
                "doc": "f3"
            },
            "f4": {
                "name": "f4",
                "type": "number",
                "doc": "f4"
            },
            "f5": {
                "name": "f5",
                "type": "number",
                "doc": "f5"
            },
            "f6": {
                "name": "f6",
                "type": "number",
                "doc": "f6"
            },
            "f7": {
                "name": "f7",
                "type": "number",
                "doc": "f7"
            },
            "f8": {
                "name": "f8",
                "type": "number",
                "doc": "f8"
            },
            "f9": {
                "name": "f9",
                "type": "number",
                "doc": "f9"
            },
            "f10": {
                "name": "f10",
                "type": "number",
                "doc": "f10"
            },
            "numLock": {
                "name": "numLock",
                "type": "number",
                "doc": "numLock"
            },
            "scrollLock": {
                "name": "scrollLock",
                "type": "number",
                "doc": "scrollLock"
            },
            "numPad7": {
                "name": "numPad7",
                "type": "number",
                "doc": "numPad7"
            },
            "numPad8": {
                "name": "numPad8",
                "type": "number",
                "doc": "numPad8"
            },
            "numPad9": {
                "name": "numPad9",
                "type": "number",
                "doc": "numPad9"
            },
            "numPadSubtract": {
                "name": "numPadSubtract",
                "type": "number",
                "doc": "numPadSubtract"
            },
            "numPad4": {
                "name": "numPad4",
                "type": "number",
                "doc": "numPad4"
            },
            "numPad5": {
                "name": "numPad5",
                "type": "number",
                "doc": "numPad5"
            },
            "numPad6": {
                "name": "numPad6",
                "type": "number",
                "doc": "numPad6"
            },
            "numPadAdd": {
                "name": "numPadAdd",
                "type": "number",
                "doc": "numPadAdd"
            },
            "numPad1": {
                "name": "numPad1",
                "type": "number",
                "doc": "numPad1"
            },
            "numPad2": {
                "name": "numPad2",
                "type": "number",
                "doc": "numPad2"
            },
            "numPad3": {
                "name": "numPad3",
                "type": "number",
                "doc": "numPad3"
            },
            "numPad0": {
                "name": "numPad0",
                "type": "number",
                "doc": "numPad0"
            },
            "numPadDecimal": {
                "name": "numPadDecimal",
                "type": "number",
                "doc": "numPadDecimal"
            },
            "f11": {
                "name": "f11",
                "type": "number",
                "doc": "f11"
            },
            "f12": {
                "name": "f12",
                "type": "number",
                "doc": "f12"
            },
            "f13": {
                "name": "f13",
                "type": "number",
                "doc": "f13"
            },
            "f14": {
                "name": "f14",
                "type": "number",
                "doc": "f14"
            },
            "f15": {
                "name": "f15",
                "type": "number",
                "doc": "f15"
            },
            "kana": {
                "name": "kana",
                "type": "number",
                "doc": "kana"
            },
            "convert": {
                "name": "convert",
                "type": "number",
                "doc": "convert"
            },
            "noconvert": {
                "name": "noconvert",
                "type": "number",
                "doc": "noconvert"
            },
            "yen": {
                "name": "yen",
                "type": "number",
                "doc": "yen"
            },
            "numPadEquals": {
                "name": "numPadEquals",
                "type": "number",
                "doc": "numPadEquals"
            },
            "circumflex": {
                "name": "circumflex",
                "type": "number",
                "doc": "circumflex"
            },
            "at": {
                "name": "at",
                "type": "number",
                "doc": "at"
            },
            "colon": {
                "name": "colon",
                "type": "number",
                "doc": "colon"
            },
            "underscore": {
                "name": "underscore",
                "type": "number",
                "doc": "underscore"
            },
            "kanji": {
                "name": "kanji",
                "type": "number",
                "doc": "kanji"
            },
            "stop": {
                "name": "stop",
                "type": "number",
                "doc": "stop"
            },
            "ax": {
                "name": "ax",
                "type": "number",
                "doc": "ax"
            },
            "numPadEnter": {
                "name": "numPadEnter",
                "type": "number",
                "doc": "numPadEnter"
            },
            "rightCtrl": {
                "name": "rightCtrl",
                "type": "number",
                "doc": "rightCtrl"
            },
            "numPadComma": {
                "name": "numPadComma",
                "type": "number",
                "doc": "numPadComma"
            },
            "numPadDivide": {
                "name": "numPadDivide",
                "type": "number",
                "doc": "numPadDivide"
            },
            "rightAlt": {
                "name": "rightAlt",
                "type": "number",
                "doc": "rightAlt"
            },
            "pause": {
                "name": "pause",
                "type": "number",
                "doc": "pause"
            },
            "home": {
                "name": "home",
                "type": "number",
                "doc": "home"
            },
            "up": {
                "name": "up",
                "type": "number",
                "doc": "up"
            },
            "pageUp": {
                "name": "pageUp",
                "type": "number",
                "doc": "pageUp"
            },
            "left": {
                "name": "left",
                "type": "number",
                "doc": "left"
            },
            "right": {
                "name": "right",
                "type": "number",
                "doc": "right"
            },
            "end": {
                "name": "end",
                "type": "number",
                "doc": "end"
            },
            "down": {
                "name": "down",
                "type": "number",
                "doc": "down"
            },
            "pageDown": {
                "name": "pageDown",
                "type": "number",
                "doc": "pageDown"
            },
            "insert": {
                "name": "insert",
                "type": "number",
                "doc": "insert"
            },
            "delete": {
                "name": "delete",
                "type": "number",
                "doc": "delete"
            }
        }
    },
    "math": {
        "name": "math",
        "type": "field",
        "inherits": [],
        "doc": "Default Lua Math API",
        "properties": {
            "abs": {
                "name": "abs",
                "type": "function",
                "doc": "Returns the absolute value of x.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "acos": {
                "name": "acos",
                "type": "function",
                "doc": "Returns the arc cosine of x.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "asin": {
                "name": "asin",
                "type": "function",
                "doc": "Returns the arc sine of x.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "atan": {
                "name": "atan",
                "type": "function",
                "doc": "Returns the arc tangent of x.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "atan2": {
                "name": "atan2",
                "type": "function",
                "doc": "Returns the arc tangent of y/x.",
                "returns": "number",
                "args": {
                    "y": {
                        "name": "y",
                        "type": "number",
                        "doc": "A number"
                    },
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "ceil": {
                "name": "ceil",
                "type": "function",
                "doc": "Returns x rounded up to the nearest integer.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "cos": {
                "name": "cos",
                "type": "function",
                "doc": "Returns the cosine of x.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "cosh": {
                "name": "cosh",
                "type": "function",
                "doc": "Returns the hyperbolic cosine of x.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "deg": {
                "name": "deg",
                "type": "function",
                "doc": "Converts radians to degrees.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "exp": {
                "name": "exp",
                "type": "function",
                "doc": "Returns the value of e^x.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "floor": {
                "name": "floor",
                "type": "function",
                "doc": "Returns x rounded down to the nearest integer.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "fmod": {
                "name": "fmod",
                "type": "function",
                "doc": "Returns the remainder of x/y.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    },
                    "y": {
                        "name": "y",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "frexp": {
                "name": "frexp",
                "type": "function",
                "doc": "Returns m and e such that x = m*2^e, e is an integer and the absolute value of m is in the range [0.5, 1) (or zero when x is zero).",
                "returns": "number, number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "huge": {
                "name": "huge",
                "type": "number",
                "doc": "A number larger than or equal to any other number"
            },
            "ldexp": {
                "name": "ldexp",
                "type": "function",
                "doc": "Returns m*2^e.",
                "returns": "number",
                "args": {
                    "m": {
                        "name": "m",
                        "type": "number",
                        "doc": "A number"
                    },
                    "e": {
                        "name": "e",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "log": {
                "name": "log",
                "type": "function",
                "doc": "Returns the natural logarithm of x.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "log10": {
                "name": "log10",
                "type": "function",
                "doc": "Returns the base-10 logarithm of x.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "max": {
                "name": "max",
                "type": "function",
                "doc": "Returns the maximum value of a set of numbers.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    },
                    "...": {
                        "name": "...",
                        "type": "number",
                        "doc": "More numbers"
                    }
                }
            },
            "min": {
                "name": "min",
                "type": "function",
                "doc": "Returns the minimum value of a set of numbers.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    },
                    "...": {
                        "name": "...",
                        "type": "number",
                        "doc": "More numbers"
                    }
                }
            },
            "modf": {
                "name": "modf",
                "type": "function",
                "doc": "Returns the integral and fractional parts of x.",
                "returns": "number, number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "pi": {
                "name": "pi",
                "type": "number",
                "doc": "The mathematical constant pi"
            },
            "pow": {
                "name": "pow",
                "type": "function",
                "doc": "Returns x^y.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    },
                    "y": {
                        "name": "y",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "rad": {
                "name": "rad",
                "type": "function",
                "doc": "Converts degrees to radians.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "random": {
                "name": "random",
                "type": "function",
                "doc": "Returns a random number with the range [0, 1), [1, m], or [m, n].",
                "returns": "number",
                "args": {
                    "[m]": {
                        "name": "[m]",
                        "type": "number",
                        "doc": "A number"
                    },
                    "[n]": {
                        "name": "[n]",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "randomseed": {
                "name": "",
                "type": "function",
                "doc": "Seeds the RNG with x.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "sin": {
                "name": "sin",
                "type": "function",
                "doc": "Returns the sine of x.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "sinh": {
                "name": "sinh",
                "type": "function",
                "doc": "Returns the hyperbolic sine of x.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "sqrt": {
                "name": "sqrt",
                "type": "function",
                "doc": "Returns the square root of x.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "tan": {
                "name": "tan",
                "type": "function",
                "doc": "Returns the tangent of x.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            },
            "tanh": {
                "name": "tanh",
                "type": "function",
                "doc": "Returns the hyperbolic tangent of x.",
                "returns": "number",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "A number"
                    }
                }
            }
        }
    },
    "multishell": {
        "name": "multishell",
        "type": "field",
        "inherits": [],
        "doc": "Allows running multiple terminal sessions at once. (1.6+) (Advanced only)",
        "properties": {
            "getCurrent": {
                "name": "getCurrent",
                "type": "function",
                "doc": "Returns the current tab ID.",
                "returns": "number",
                "args": {}
            },
            "getCount": {
                "name": "getCount",
                "type": "function",
                "doc": "Returns the number of tabs open.",
                "returns": "number",
                "args": {}
            },
            "launch": {
                "name": "launch",
                "type": "function",
                "doc": "Starts a program in a new tab.",
                "returns": "number",
                "args": {
                    "environment": {
                        "name": "environment",
                        "type": "table",
                        "doc": "The environment of the new task"
                    },
                    "program path": {
                        "name": "program path",
                        "type": "string",
                        "doc": "The path to the program to run"
                    },
                    "[arguments]": {
                        "name": "[arguments]",
                        "type": "string",
                        "doc": "Any arguments to pass to the program"
                    }
                }
            },
            "setFocus": {
                "name": "setFocus",
                "type": "function",
                "doc": "Sets the tab as the current tab.",
                "returns": "boolean",
                "args": {
                    "tabID": {
                        "name": "tabID",
                        "type": "number",
                        "doc": "The ID of the tab"
                    }
                }
            },
            "setTitle": {
                "name": "setTitle",
                "type": "function",
                "doc": "Sets the title of the tab.",
                "returns": "nil",
                "args": {
                    "tabID": {
                        "name": "tabID",
                        "type": "number",
                        "doc": "The ID of the tab"
                    },
                    "title": {
                        "name": "title",
                        "type": "string",
                        "doc": "The new name of the tab"
                    }
                }
            },
            "getTitle": {
                "name": "getTitle",
                "type": "function",
                "doc": "Returns the title of a tab.",
                "returns": "string",
                "args": {
                    "tabID": {
                        "name": "tabID",
                        "type": "number",
                        "doc": "The ID of the tab"
                    }
                }
            },
            "getFocus": {
                "name": "getFocus",
                "type": "function",
                "doc": "Returns the ID of the current tab.",
                "returns": "number",
                "args": {}
            }
        }
    },
    "os": {
        "name": "os",
        "type": "field",
        "inherits": [],
        "doc": "Interfaces with CraftOS and the computer.",
        "properties": {
            "version": {
                "name": "version",
                "type": "function",
                "doc": "Returns the version of CraftOS running on the computer.",
                "returns": "string",
                "args": {}
            },
            "getComputerID": {
                "name": "getComputerID",
                "type": "function",
                "doc": "Returns the ID of the current computer.",
                "returns": "number",
                "args": {}
            },
            "getComputerLabel": {
                "name": "getComputerLabel",
                "type": "function",
                "doc": "Returns the label of the computer.",
                "returns": "string/nil",
                "args": {}
            },
            "setComputerLabel": {
                "name": "setComputerLabel",
                "type": "function",
                "doc": "Sets the label of the computer.",
                "returns": "nil",
                "args": {
                    "label": {
                        "name": "label",
                        "type": "string/nil",
                        "doc": "The new label or nil"
                    }
                }
            },
            "run": {
                "name": "run",
                "type": "function",
                "doc": "Runs a Lua script with the specified environment.",
                "returns": "boolean",
                "args": {
                    "environment": {
                        "name": "environment",
                        "type": "table",
                        "doc": "The environment to pass to the program"
                    },
                    "programPath": {
                        "name": "programPath",
                        "type": "string",
                        "doc": "The path to the program to run"
                    },
                    "[arguments]": {
                        "name": "[arguments]",
                        "type": "string",
                        "doc": "Any arguments to pass to the program"
                    }
                }
            },
            "loadAPI": {
                "name": "loadAPI",
                "type": "function",
                "doc": "Loads an API into the global table. (Deprecated)",
                "returns": "boolean",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The path to the API to load"
                    }
                }
            },
            "unloadAPI": {
                "name": "unloadAPI",
                "type": "function",
                "doc": "Unloads a previously loaded API. (Deprecated)",
                "returns": "nil",
                "args": {
                    "name": {
                        "name": "name",
                        "type": "string",
                        "doc": "The name of the API"
                    }
                }
            },
            "pullEvent": {
                "name": "pullEvent",
                "type": "function",
                "doc": "Waits for an event to occur.",
                "returns": "string, any...",
                "args": {
                    "[target-event]": {
                        "name": "[target-event]",
                        "type": "string",
                        "doc": "A filter specifying which event to wait for (optional)"
                    }
                }
            },
            "pullEventRaw": {
                "name": "pullEventRaw",
                "type": "function",
                "doc": "Waits for an event to occur (doesn't terminate when Ctrl-T is pressed).",
                "returns": "string, any...",
                "args": {
                    "[target-event]": {
                        "name": "[target-event]",
                        "type": "string",
                        "doc": "A filter specifying which event to wait for (optional)"
                    }
                }
            },
            "queueEvent": {
                "name": "queueEvent",
                "type": "function",
                "doc": "Adds an event to the event queue.",
                "returns": "nil",
                "args": {
                    "event": {
                        "name": "event",
                        "type": "string",
                        "doc": "The event to queue"
                    },
                    "...": {
                        "name": "...",
                        "type": "any",
                        "doc": "Any parameters to pass in the event"
                    }
                }
            },
            "clock": {
                "name": "clock",
                "type": "function",
                "doc": "Returns the amount of time since the computer was started.",
                "returns": "number",
                "args": {}
            },
            "startTimer": {
                "name": "startTimer",
                "type": "function",
                "doc": "Queues an event after an amount of seconds has passed, and returns the ID.",
                "returns": "number",
                "args": {
                    "timeout": {
                        "name": "timeout",
                        "type": "number",
                        "doc": "The number of seconds to wait"
                    }
                }
            },
            "cancelTimer": {
                "name": "cancelTimer",
                "type": "function",
                "doc": "Cancels a previously started timer.",
                "returns": "nil",
                "args": {
                    "timerID": {
                        "name": "timerID",
                        "type": "number",
                        "doc": "The ID of the timer"
                    }
                }
            },
            "time": {
                "name": "time",
                "type": "function",
                "doc": "Returns the current time in the selected locale.",
                "returns": "number",
                "args": {
                    "[locale]": {
                        "name": "[locale]",
                        "type": "string",
                        "doc": "One of 'ingame', 'utc', or 'local'. Defaults to 'ingame'. (1.8+)"
                    }
                }
            },
            "date": {
                "name": "date",
                "type": "function",
                "doc": "Returns a string or table with the current or provided time representation. (CC:T)",
                "returns": "string/table",
                "args": {
                    "[format]": {
                        "name": "[format]",
                        "type": "string",
                        "doc": "The format for the date string. If set to '*t', returns a table instead."
                    },
                    "[time]": {
                        "name": "[time]",
                        "type": "number",
                        "doc": "The time to convert. Defaults to the current local time, or current UTC time if the format is prefixed with '!'."
                    }
                }
            },
            "sleep": {
                "name": "sleep",
                "type": "function",
                "doc": "Sleeps for a number of seconds.",
                "returns": "nil",
                "args": {
                    "time": {
                        "name": "time",
                        "type": "number",
                        "doc": "The number of seconds to sleep"
                    }
                }
            },
            "day": {
                "name": "day",
                "type": "function",
                "doc": "Returns the current day for the selected locale.",
                "returns": "number",
                "args": {
                    "[locale]": {
                        "name": "[locale]",
                        "type": "string",
                        "doc": "One of 'ingame', 'utc', or 'local'. Defaults to 'ingame'. (1.8+)"
                    }
                }
            },
            "epoch": {
                "name": "epoch",
                "type": "function",
                "doc": "Returns the time in seconds since an epoch depending on the locale.",
                "returns": "number",
                "args": {
                    "[locale]": {
                        "name": "[locale]",
                        "type": "string",
                        "doc": "One of 'ingame', 'utc', or 'local'. Defaults to 'ingame'. (1.8+)"
                    }
                }
            },
            "setAlarm": {
                "name": "setAlarm",
                "type": "function",
                "doc": "Sets an alarm to activate at an in-game time, and returns the ID.",
                "returns": "number",
                "args": {
                    "time": {
                        "name": "time",
                        "type": "number",
                        "doc": "The time to activate at"
                    }
                }
            },
            "cancelAlarm": {
                "name": "cancelAlarm",
                "type": "function",
                "doc": "Cancels a previously started alarm.",
                "returns": "nil",
                "args": {
                    "alarmID": {
                        "name": "alarmID",
                        "type": "number",
                        "doc": "The ID of the alarm"
                    }
                }
            },
            "shutdown": {
                "name": "shutdown",
                "type": "function",
                "doc": "Powers off the computer.",
                "returns": "nil",
                "args": {}
            },
            "reboot": {
                "name": "reboot",
                "type": "function",
                "doc": "Reboots the computer.",
                "returns": "nil",
                "args": {}
            }
        }
    },
    "paintutils": {
        "name": "paintutils",
        "type": "field",
        "inherits": [],
        "doc": "Allows drawing on the screen.",
        "properties": {
            "loadImage": {
                "name": "loadImage",
                "type": "function",
                "doc": "Loads and returns an image from a file.",
                "returns": "table",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The path to the file to load"
                    }
                }
            },
            "drawImage": {
                "name": "drawImage",
                "type": "function",
                "doc": "Draws an image on the screen.",
                "returns": "nil",
                "args": {
                    "image": {
                        "name": "image",
                        "type": "table",
                        "doc": "The image to draw"
                    },
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "The X coordinate"
                    },
                    "y": {
                        "name": "y",
                        "type": "number",
                        "doc": "The Y coordinate"
                    }
                }
            },
            "drawPixel": {
                "name": "drawPixel",
                "type": "function",
                "doc": "Draws a pixel on the screen.",
                "returns": "nil",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "The X coordinate"
                    },
                    "y": {
                        "name": "y",
                        "type": "number",
                        "doc": "The Y coordinate"
                    },
                    "[color]": {
                        "name": "[color]",
                        "type": "color",
                        "doc": "The color to paint with"
                    }
                }
            },
            "drawLine": {
                "name": "drawLine",
                "type": "function",
                "doc": "Draws a line on the screen.",
                "returns": "nil",
                "args": {
                    "startX": {
                        "name": "startX",
                        "type": "number",
                        "doc": "The first X coordinate"
                    },
                    "startY": {
                        "name": "startY",
                        "type": "number",
                        "doc": "The first Y coordinate"
                    },
                    "endX": {
                        "name": "endX",
                        "type": "number",
                        "doc": "The second X coordinate"
                    },
                    "endY": {
                        "name": "endY",
                        "type": "number",
                        "doc": "The second Y coordinate"
                    },
                    "[color]": {
                        "name": "[color]",
                        "type": "color",
                        "doc": "The color to paint with"
                    }
                }
            },
            "drawBox": {
                "name": "drawBox",
                "type": "function",
                "doc": "Draws a box on the screen. (1.64+)",
                "returns": "nil",
                "args": {
                    "startX": {
                        "name": "startX",
                        "type": "number",
                        "doc": "The first X coordinate"
                    },
                    "startY": {
                        "name": "startY",
                        "type": "number",
                        "doc": "The first Y coordinate"
                    },
                    "endX": {
                        "name": "endX",
                        "type": "number",
                        "doc": "The second X coordinate"
                    },
                    "endY": {
                        "name": "endY",
                        "type": "number",
                        "doc": "The second Y coordinate"
                    },
                    "[color]": {
                        "name": "[color]",
                        "type": "color",
                        "doc": "The color to paint with"
                    }
                }
            },
            "drawFilledBox": {
                "name": "drawFilledBox",
                "type": "function",
                "doc": "Draws a filled box on the screen. (1.64+)",
                "returns": "nil",
                "args": {
                    "startX": {
                        "name": "startX",
                        "type": "number",
                        "doc": "The first X coordinate"
                    },
                    "startY": {
                        "name": "startY",
                        "type": "number",
                        "doc": "The first Y coordinate"
                    },
                    "endX": {
                        "name": "endX",
                        "type": "number",
                        "doc": "The second X coordinate"
                    },
                    "endY": {
                        "name": "endY",
                        "type": "number",
                        "doc": "The second Y coordinate"
                    },
                    "[color]": {
                        "name": "[color]",
                        "type": "color",
                        "doc": "The color to paint with"
                    }
                }
            }
        }
    },
    "parallel": {
        "name": "parallel",
        "type": "field",
        "inherits": [],
        "doc": "Allows easier multitasking",
        "properties": {
            "waitForAny": {
                "name": "waitForAny",
                "type": "function",
                "doc": "Runs the functions all at once and waits for one to return.",
                "returns": "number",
                "args": {
                    "function1": {
                        "name": "function1",
                        "type": "function",
                        "doc": "The first function"
                    },
                    "function2": {
                        "name": "function2",
                        "type": "function",
                        "doc": "The second function"
                    },
                    "...": {
                        "name": "...",
                        "type": "function",
                        "doc": "Any other functions"
                    }
                }
            },
            "waitForAll": {
                "name": "waitForAll",
                "type": "function",
                "doc": "Runs the functions all at once and waits for all to return.",
                "returns": "nil",
                "args": {
                    "function1": {
                        "name": "function1",
                        "type": "function",
                        "doc": "The first function"
                    },
                    "function2": {
                        "name": "function2",
                        "type": "function",
                        "doc": "The second function"
                    },
                    "...": {
                        "name": "...",
                        "type": "function",
                        "doc": "Any other functions"
                    }
                }
            }
        }
    },
    "peripheral": {
        "name": "peripheral",
        "type": "field",
        "inherits": [],
        "doc": "Interacts with peripherals.",
        "properties": {
            "isPresent": {
                "name": "isPresent",
                "type": "function",
                "doc": "Checks if a peripheral is present on a side.",
                "returns": "boolean",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "getType": {
                "name": "getType",
                "type": "function",
                "doc": "Returns the type(s) of peripheral on a side.",
                "returns": "string/nil...",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string/table",
                        "doc": "The side or wrapped peripheral to check"
                    }
                }
            },
            "hasType": {
                "name": "hasType",
                "type": "function",
                "doc": "Returns whether the peripheral on a side has the specified type.",
                "returns": "string/nil...",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string/table",
                        "doc": "The side or wrapped peripheral to check"
                    },
                    "type": {
                        "name": "type",
                        "type": "string",
                        "doc": "The name of the type to check for"
                    }
                }
            },
            "getMethods": {
                "name": "getMethods",
                "type": "function",
                "doc": "Returns a list of methods that the peripheral has.",
                "returns": "table/nil",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "getName": {
                "name": "getName",
                "type": "function",
                "doc": "Returns the side a wrapped peripheral is on. (CC:1 1.88+)",
                "returns": "string/nil",
                "args": {
                    "peripheral": {
                        "name": "peripheral",
                        "type": "table",
                        "doc": "The peripheral to check"
                    }
                }
            },
            "call": {
                "name": "call",
                "type": "function",
                "doc": "Calls a method on a peripheral.",
                "returns": "any",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    },
                    "method": {
                        "name": "method",
                        "type": "string",
                        "doc": "The method to call"
                    },
                    "...": {
                        "name": "...",
                        "type": "any",
                        "doc": "Any arguments to pass to the method"
                    }
                }
            },
            "wrap": {
                "name": "wrap",
                "type": "function",
                "doc": "Returns a table containing all of the methods of a peripheral.",
                "returns": "table/nil",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "find": {
                "name": "find",
                "type": "function",
                "doc": "Finds peripherals of a type and returns their tables of methods. (1.6+)",
                "returns": "table/nil...",
                "args": {
                    "type": {
                        "name": "type",
                        "type": "string",
                        "doc": "The type of peripheral to find"
                    },
                    "[fnFilter]": {
                        "name": "[fnFilter]",
                        "type": "function",
                        "doc": "A function that filters through the entries",
                        "returns": "boolean",
                        "args": {
                            "name": {
                                "name": "name",
                                "type": "string",
                                "doc": "The name of the peripheral"
                            },
                            "object": {
                                "name": "object",
                                "type": "table",
                                "doc": "The table of methods"
                            }
                        }
                    }
                }
            },
            "getNames": {
                "name": "getNames",
                "type": "function",
                "doc": "Returns a list of names of connected peripherals.",
                "returns": "table",
                "args": {}
            }
        }
    },
    "rednet": {
        "name": "rednet",
        "type": "field",
        "inherits": [],
        "doc": "Controls transferring data over modems.",
        "properties": {
            "open": {
                "name": "open",
                "type": "function",
                "doc": "Opens a side for transcieving.",
                "returns": "nil",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to open"
                    }
                }
            },
            "close": {
                "name": "close",
                "type": "function",
                "doc": "Closes a side for transcieving.",
                "returns": "nil",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to close"
                    }
                }
            },
            "send": {
                "name": "send",
                "type": "function",
                "doc": "Sends a message to a computer.",
                "returns": "nil",
                "args": {
                    "recieverID": {
                        "name": "recieverID",
                        "type": "string",
                        "doc": "The ID of the computer to recieve the message"
                    },
                    "message": {
                        "name": "message",
                        "type": "any",
                        "doc": "The message to send"
                    },
                    "[protocol]": {
                        "name": "[protocol]",
                        "type": "string",
                        "doc": "The protocol to use (1.6+)"
                    }
                }
            },
            "broadcast": {
                "name": "broadcast",
                "type": "function",
                "doc": "Sends a message to all computers.",
                "returns": "nil",
                "args": {
                    "message": {
                        "name": "message",
                        "type": "any",
                        "doc": "The message to send"
                    },
                    "[protocol]": {
                        "name": "[protocol]",
                        "type": "string",
                        "doc": "The protocol to use (1.6+)"
                    }
                }
            },
            "receive": {
                "name": "receive",
                "type": "function",
                "doc": "Waits for a message to be received, then returns the received message.",
                "returns": "number, any, number/string",
                "args": {
                    "[protocolFilter]": {
                        "name": "[protocolFilter]",
                        "type": "string",
                        "doc": "The protocol to search for, requires timeout to be specified after"
                    },
                    "[timeout]": {
                        "name": "[timeout]",
                        "type": "number",
                        "doc": "The maximim amount of time to wait for a message, defaults to 2"
                    }
                }
            },
            "isOpen": {
                "name": "isOpen",
                "type": "function",
                "doc": "Checks if a modem is open.",
                "returns": "boolean",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "host": {
                "name": "host",
                "type": "function",
                "doc": "Adds a hostname for a protocol for rednet.lookup(). (1.6+)",
                "returns": "nil",
                "args": {
                    "protocol": {
                        "name": "protocol",
                        "type": "string",
                        "doc": "The protocol to use"
                    },
                    "hostname": {
                        "name": "hostname",
                        "type": "string",
                        "doc": "The hostname to use"
                    }
                }
            },
            "unhost": {
                "name": "unhost",
                "type": "function",
                "doc": "Removes a hostname for a protocol for rednet.lookup(). (1.6+)",
                "returns": "nil",
                "args": {
                    "protocol": {
                        "name": "protocol",
                        "type": "string",
                        "doc": "The protocol to use"
                    },
                    "hostname": {
                        "name": "hostname",
                        "type": "string",
                        "doc": "The hostname to use"
                    }
                }
            },
            "lookup": {
                "name": "lookup",
                "type": "function",
                "doc": "Searches for a hostname or a protocol. (1.6+)",
                "returns": "nil",
                "args": {
                    "protocol": {
                        "name": "protocol",
                        "type": "string",
                        "doc": "The protocol to use"
                    },
                    "[hostname]": {
                        "name": "[hostname]",
                        "type": "string",
                        "doc": "The hostname to use (optional)"
                    }
                }
            }
        }
    },
    "redstone": {
        "name": "redstone",
        "type": "field",
        "inherits": [],
        "doc": "Controls redstone inputs and outputs.",
        "properties": {
            "getSides": {
                "name": "getSides",
                "type": "function",
                "doc": "Returns the sides available for redstone.",
                "returns": "table",
                "args": {}
            },
            "getInput": {
                "name": "getInput",
                "type": "function",
                "doc": "Returns the digital value of the redstone on a side.",
                "returns": "boolean",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "setOutput": {
                "name": "setOutput",
                "type": "function",
                "doc": "Sets the digital value of the redstone output on a side.",
                "returns": "nil",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    },
                    "value": {
                        "name": "value",
                        "type": "boolean",
                        "doc": "The value to set"
                    }
                }
            },
            "getOutput": {
                "name": "getOutput",
                "type": "function",
                "doc": "Returns the digital value of the redstone that's being output on a side.",
                "returns": "boolean",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "getAnalogInput": {
                "name": "getAnalogInput",
                "type": "function",
                "doc": "Returns the analog value of the redstone on a side. (1.51+)",
                "returns": "number",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "setAnalogOutput": {
                "name": "setAnalogOutput",
                "type": "function",
                "doc": "Sets the analog value of the redstone output on a side. (1.51+)",
                "returns": "nil",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    },
                    "value": {
                        "name": "value",
                        "type": "number",
                        "doc": "The value to set"
                    }
                }
            },
            "getAnalogOutput": {
                "name": "getAnalogOutput",
                "type": "function",
                "doc": "Returns the analog value of the redstone that's being output on a side. (1.51+)",
                "returns": "number",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "getBundledInput": {
                "name": "getBundledInput",
                "type": "function",
                "doc": "Returns the value of the bundled redstone on a side.",
                "returns": "number",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "setBundledOutput": {
                "name": "setBundledOutput",
                "type": "function",
                "doc": "Sets the value of the bundled redstone output on a side.",
                "returns": "nil",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    },
                    "colors": {
                        "name": "colors",
                        "type": "number",
                        "doc": "The value to set as a bitmask of colors"
                    }
                }
            },
            "getBundledOutput": {
                "name": "getBundledOutput",
                "type": "function",
                "doc": "Returns the value of the bundled redstone that's being output on a side.",
                "returns": "number",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "testBundledOutput": {
                "name": "testBundledOutput",
                "type": "function",
                "doc": "Checks if a color is active in a bundled redstone wire.",
                "returns": "boolean",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    },
                    "color": {
                        "name": "color",
                        "type": "color",
                        "doc": "The value to set as a bitmask"
                    }
                }
            }
        }
    },
    "rs": {
        "name": "rs",
        "type": "field",
        "inherits": [],
        "doc": "Controls redstone inputs and outputs.",
        "properties": {
            "getSides": {
                "name": "getSides",
                "type": "function",
                "doc": "Returns the sides available for redstone.",
                "returns": "table",
                "args": {}
            },
            "getInput": {
                "name": "getInput",
                "type": "function",
                "doc": "Returns the digital value of the redstone on a side.",
                "returns": "boolean",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "setOutput": {
                "name": "setOutput",
                "type": "function",
                "doc": "Sets the digital value of the redstone output on a side.",
                "returns": "nil",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    },
                    "value": {
                        "name": "value",
                        "type": "boolean",
                        "doc": "The value to set"
                    }
                }
            },
            "getOutput": {
                "name": "getOutput",
                "type": "function",
                "doc": "Returns the digital value of the redstone that's being output on a side.",
                "returns": "boolean",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "getAnalogInput": {
                "name": "getAnalogInput",
                "type": "function",
                "doc": "Returns the analog value of the redstone on a side. (1.51+)",
                "returns": "number",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "setAnalogOutput": {
                "name": "setAnalogOutput",
                "type": "function",
                "doc": "Sets the analog value of the redstone output on a side. (1.51+)",
                "returns": "nil",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    },
                    "value": {
                        "name": "value",
                        "type": "number",
                        "doc": "The value to set"
                    }
                }
            },
            "getAnalogOutput": {
                "name": "getAnalogOutput",
                "type": "function",
                "doc": "Returns the analog value of the redstone that's being output on a side. (1.51+)",
                "returns": "number",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "getBundledInput": {
                "name": "getBundledInput",
                "type": "function",
                "doc": "Returns the value of the bundled redstone on a side.",
                "returns": "number",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "setBundledOutput": {
                "name": "setBundledOutput",
                "type": "function",
                "doc": "Sets the value of the bundled redstone output on a side.",
                "returns": "nil",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    },
                    "colors": {
                        "name": "colors",
                        "type": "number",
                        "doc": "The value to set as a bitmask of colors"
                    }
                }
            },
            "getBundledOutput": {
                "name": "getBundledOutput",
                "type": "function",
                "doc": "Returns the value of the bundled redstone that's being output on a side.",
                "returns": "number",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    }
                }
            },
            "testBundledOutput": {
                "name": "testBundledOutput",
                "type": "function",
                "doc": "Checks if a color is active in a bundled redstone wire.",
                "returns": "boolean",
                "args": {
                    "side": {
                        "name": "side",
                        "type": "string",
                        "doc": "The side to check"
                    },
                    "color": {
                        "name": "color",
                        "type": "color",
                        "doc": "The value to set as a bitmask"
                    }
                }
            }
        }
    },
    "settings": {
        "name": "settings",
        "type": "field",
        "inherits": [],
        "doc": "Controls settings for CraftOS and programs. (1.77+)",
        "properties": {
            "set": {
                "name": "set",
                "type": "function",
                "doc": "Sets a setting in the current settings.",
                "returns": "nil",
                "args": {
                    "name": {
                        "name": "name",
                        "type": "string",
                        "doc": "The key for the setting"
                    },
                    "value": {
                        "name": "value",
                        "type": "any",
                        "doc": "The value for the setting"
                    }
                }
            },
            "get": {
                "name": "get",
                "type": "function",
                "doc": "Gets a setting from the current settings.",
                "returns": "any",
                "args": {
                    "name": {
                        "name": "name",
                        "type": "string",
                        "doc": "The key for the setting"
                    },
                    "[default]": {
                        "name": "[default]",
                        "type": "any",
                        "doc": "The default value to return if it doesn't exist"
                    }
                }
            },
            "unset": {
                "name": "unset",
                "type": "function",
                "doc": "Removes a setting in the current settings.",
                "returns": "nil",
                "args": {
                    "name": {
                        "name": "name",
                        "type": "string",
                        "doc": "The key for the setting"
                    }
                }
            },
            "clear": {
                "name": "clear",
                "type": "function",
                "doc": "Clears all settings.",
                "returns": "nil",
                "args": {}
            },
            "getNames": {
                "name": "getNames",
                "type": "function",
                "doc": "Returns a list of keys.",
                "returns": "table",
                "args": {}
            },
            "load": {
                "name": "load",
                "type": "function",
                "doc": "Loads settings from a file.",
                "returns": "nil",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The file to access"
                    }
                }
            },
            "save": {
                "name": "save",
                "type": "function",
                "doc": "Saves settings to a file.",
                "returns": "nil",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The file to access"
                    }
                }
            },
            "getDetails": {
                "name": "getDetails",
                "type": "function",
                "doc": "Returns a table with details about a setting. (CC:t 1.87+)",
                "returns": "table/nil",
                "args": {
                    "name": {
                        "name": "name",
                        "type": "string",
                        "doc": "The name of the setting"
                    }
                }
            },
            "define": {
                "name": "define",
                "type": "function",
                "doc": "Defines a new setting, optionally specifying various properties about it. (CC:T 1.87+)",
                "returns": "nil",
                "args": {
                    "name": {
                        "name": "name",
                        "type": "string",
                        "doc": "The name of the setting to define"
                    },
                    "[options]": {
                        "name": "[options]",
                        "type": "table",
                        "doc": "A table with any of the fields 'description', 'default', and 'type'."
                    }
                }
            },
            "undefine": {
                "name": "undefine",
                "type": "function",
                "doc": "Removes a previously defined setting. (CC:T 1.87+)",
                "returns": "nil",
                "args": {
                    "name": {
                        "name": "name",
                        "type": "string",
                        "doc": "The name of the setting to undefine"
                    }
                }
            }
        }
    },
    "shell": {
        "name": "shell",
        "type": "field",
        "inherits": [],
        "doc": "Interacts with the CraftOS shell - not available to APIs.",
        "properties": {
            "exit": {
                "name": "exit",
                "type": "function",
                "doc": "Exits the current shell.",
                "returns": "nil",
                "args": {}
            },
            "dir": {
                "name": "dir",
                "type": "function",
                "doc": "Returns the current working directory.",
                "returns": "string",
                "args": {}
            },
            "setDir": {
                "name": "setDir",
                "type": "function",
                "doc": "Sets the current working directory.",
                "returns": "nil",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The directory to set"
                    }
                }
            },
            "path": {
                "name": "path",
                "type": "function",
                "doc": "Returns the current PATH.",
                "returns": "string",
                "args": {}
            },
            "setPath": {
                "name": "setPath",
                "type": "function",
                "doc": "Sets the current PATH.",
                "returns": "nil",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The PATH to set"
                    }
                }
            },
            "resolve": {
                "name": "resolve",
                "type": "function",
                "doc": "Resolves a local path to an absolute path.",
                "returns": "string",
                "args": {
                    "localPath": {
                        "name": "localPath",
                        "type": "string",
                        "doc": "The local path to resolve"
                    }
                }
            },
            "resolveProgram": {
                "name": "resolveProgram",
                "type": "function",
                "doc": "Returns the path to a program name.",
                "returns": "string",
                "args": {
                    "name": {
                        "name": "name",
                        "type": "string",
                        "doc": "The name of the program"
                    }
                }
            },
            "aliases": {
                "name": "aliases",
                "type": "function",
                "doc": "Returns a dictionary of aliases for programs.",
                "returns": "table",
                "args": {}
            },
            "setAlias": {
                "name": "setAlias",
                "type": "function",
                "doc": "Sets an alias for a program.",
                "returns": "nil",
                "args": {
                    "alias": {
                        "name": "alias",
                        "type": "string",
                        "doc": "The name of the alias"
                    },
                    "program": {
                        "name": "program",
                        "type": "string",
                        "doc": "The name of the program"
                    }
                }
            },
            "clearAlias": {
                "name": "clearAlias",
                "type": "function",
                "doc": "Removes an alias.",
                "returns": "nil",
                "args": {
                    "alias": {
                        "name": "alias",
                        "type": "string",
                        "doc": "The name of the alias"
                    }
                }
            },
            "programs": {
                "name": "programs",
                "type": "function",
                "doc": "Returns a list of all programs in the working directory and PATH.",
                "returns": "table",
                "args": {
                    "[showHidden]": {
                        "name": "[showHidden]",
                        "type": "boolean",
                        "doc": "Whether to show hidden programs"
                    }
                }
            },
            "getRunningProgram": {
                "name": "getRunningProgram",
                "type": "function",
                "doc": "Returns the absolute path to the current program.",
                "returns": "string",
                "args": {}
            },
            "run": {
                "name": "run",
                "type": "function",
                "doc": "Runs a program/command.",
                "returns": "boolean",
                "args": {
                    "command": {
                        "name": "command",
                        "type": "string",
                        "doc": "The command to run"
                    },
                    "...": {
                        "name": "...",
                        "type": "string",
                        "doc": "Any arguments to pass to the program"
                    }
                }
            },
            "openTab": {
                "name": "openTab",
                "type": "function",
                "doc": "Opens a program in a new tab. (1.6+, advanced)",
                "returns": "number",
                "args": {
                    "command": {
                        "name": "command",
                        "type": "string",
                        "doc": "The command to run"
                    },
                    "...": {
                        "name": "...",
                        "type": "string",
                        "doc": "Any arguments to pass to the program"
                    }
                }
            },
            "switchTab": {
                "name": "switchTab",
                "type": "function",
                "doc": "Changes the current tab. (1.6+, advanced)",
                "returns": "nil",
                "args": {
                    "tabID": {
                        "name": "tabID",
                        "type": "number",
                        "doc": "The ID of the tab to switch to"
                    }
                }
            },
            "complete": {
                "name": "complete",
                "type": "function",
                "doc": "Returns a list of suffixes that could complete a prefix. (1.74+)",
                "returns": "table",
                "args": {
                    "prefix": {
                        "name": "prefix",
                        "type": "string",
                        "doc": "The prefix to complete"
                    }
                }
            },
            "completeProgram": {
                "name": "completeProgram",
                "type": "function",
                "doc": "Returns a list of suffixes that could complete a program prefix. (1.74+)",
                "returns": "table",
                "args": {
                    "prefix": {
                        "name": "prefix",
                        "type": "string",
                        "doc": "The prefix to complete"
                    }
                }
            },
            "setCompletionFunction": {
                "name": "setCompletionFunction",
                "type": "function",
                "doc": "Registers a completion function that is called by shell.complete().",
                "returns": "nil",
                "args": {
                    "path": {
                        "name": "path",
                        "type": "string",
                        "doc": "The path that this will be called on"
                    },
                    "completionFunction": {
                        "name": "completionFunction",
                        "type": "function",
                        "doc": "The function to call"
                    }
                }
            },
            "getCompletionInfo": {
                "name": "getCompletionInfo",
                "type": "function",
                "doc": "Returns the table containing functions registered for shell.complete().",
                "returns": "table",
                "args": {}
            }
        }
    },
    "string": {
        "name": "string",
        "type": "byte",
        "inherits": [],
        "doc": "Default Lua string library",
        "properties": {
            "byte": {
                "name": "byte",
                "type": "function",
                "doc": "Returns the numerical codes for each character in a string.",
                "returns": "number...",
                "args": {
                    "s": {
                        "name": "s",
                        "type": "string",
                        "doc": "The string to use"
                    },
                    "[i]": {
                        "name": "[i]",
                        "type": "number",
                        "doc": "The first index (optional)"
                    },
                    "[j]": {
                        "name": "[j]",
                        "type": "number",
                        "doc": "The last index (optional)"
                    }
                }
            },
            "char": {
                "name": "char",
                "type": "function",
                "doc": "Returns a string from numerical codes.",
                "returns": "string",
                "args": {
                    "...": {
                        "name": "...",
                        "type": "number",
                        "doc": "The values of the characters"
                    }
                }
            },
            "dump": {
                "name": "dump",
                "type": "function",
                "doc": "Returns a string containing a binary representation of a function.",
                "returns": "string",
                "args": {
                    "function": {
                        "name": "function",
                        "type": "function",
                        "doc": "The function to dump"
                    }
                }
            },
            "find": {
                "name": "find",
                "type": "function",
                "doc": "Finds the location of a pattern in a string.",
                "returns": "number",
                "args": {
                    "s": {
                        "name": "s",
                        "type": "string",
                        "doc": "The string to use"
                    },
                    "pattern": {
                        "name": "pattern",
                        "type": "string",
                        "doc": "The pattern to search for"
                    },
                    "[init]": {
                        "name": "[init]",
                        "type": "number",
                        "doc": "The first index (optional)"
                    },
                    "[plain]": {
                        "name": "[plain]",
                        "type": "boolean",
                        "doc": "Whether the pattern is a plain string, or a special pattern"
                    }
                }
            },
            "format": {
                "name": "format",
                "type": "function",
                "doc": "Returns a formatted string based on a pattern.",
                "returns": "string",
                "args": {
                    "formatstring": {
                        "name": "formatstring",
                        "type": "string",
                        "doc": "The format string"
                    },
                    "...": {
                        "name": "...",
                        "type": "any",
                        "doc": "The values to substitute"
                    }
                }
            },
            "gmatch": {
                "name": "gmatch",
                "type": "function",
                "doc": "Returns an iterator function that returns each match in a string.",
                "returns": "function",
                "args": {
                    "s": {
                        "name": "s",
                        "type": "string",
                        "doc": "The string to use"
                    },
                    "pattern": {
                        "name": "pattern",
                        "type": "string",
                        "doc": "The pattern to search for"
                    }
                }
            },
            "gsub": {
                "name": "gsub",
                "type": "function",
                "doc": "Returns a copy of a string where a pattern has been replaced.",
                "returns": "string",
                "args": {
                    "s": {
                        "name": "s",
                        "type": "string",
                        "doc": "The string to use"
                    },
                    "pattern": {
                        "name": "pattern",
                        "type": "string",
                        "doc": "The pattern to search for"
                    },
                    "repl": {
                        "name": "repl",
                        "type": "string/table/function",
                        "doc": "The replacement (see string.gsub reference)"
                    }
                }
            },
            "len": {
                "name": "len",
                "type": "function",
                "doc": "Returns the length of a string.",
                "returns": "number",
                "args": {
                    "s": {
                        "name": "s",
                        "type": "string",
                        "doc": "The string to use"
                    }
                }
            },
            "lower": {
                "name": "lower",
                "type": "function",
                "doc": "Returns a copy of a string where all characters are lowercase.",
                "returns": "string",
                "args": {
                    "s": {
                        "name": "s",
                        "type": "string",
                        "doc": "The string to use"
                    }
                }
            },
            "match": {
                "name": "match",
                "type": "function",
                "doc": "Returns a list of matches for a pattern in a string.",
                "returns": "string/nil",
                "args": {
                    "s": {
                        "name": "s",
                        "type": "string",
                        "doc": "The string to use"
                    },
                    "pattern": {
                        "name": "pattern",
                        "type": "string",
                        "doc": "The pattern to search for"
                    },
                    "[init]": {
                        "name": "[init]",
                        "type": "number",
                        "doc": "The first index (optional)"
                    }
                }
            },
            "rep": {
                "name": "rep",
                "type": "function",
                "doc": "Returns a string repeating another string a number of times.",
                "returns": "string",
                "args": {
                    "s": {
                        "name": "s",
                        "type": "string",
                        "doc": "The string to use"
                    },
                    "n": {
                        "name": "n",
                        "type": "number",
                        "doc": "The number of times to repeat"
                    }
                }
            },
            "reverse": {
                "name": "reverse",
                "type": "function",
                "doc": "Returns a string that is the reverse of the first string.",
                "returns": "string",
                "args": {
                    "s": {
                        "name": "s",
                        "type": "string",
                        "doc": "The string to use"
                    }
                }
            },
            "sub": {
                "name": "sub",
                "type": "function",
                "doc": "Returns a substring starting at i and continuing to j.",
                "returns": "string",
                "args": {
                    "s": {
                        "name": "s",
                        "type": "string",
                        "doc": "The string to use"
                    },
                    "i": {
                        "name": "i",
                        "type": "number",
                        "doc": "The first index"
                    },
                    "[j]": {
                        "name": "[j]",
                        "type": "number",
                        "doc": "The last index (optional)"
                    }
                }
            },
            "upper": {
                "name": "upper",
                "type": "function",
                "doc": "Returns a copy of a string where all characters are uppercase.",
                "returns": "string",
                "args": {
                    "s": {
                        "name": "s",
                        "type": "string",
                        "doc": "The string to use"
                    }
                }
            },
            "pack": {
                "name": "pack",
                "type": "function",
                "doc": "Returns a string with the binary representation of a set of arguments, using the specified format. (CC:T 1.91+)",
                "returns": "string",
                "args": {
                    "format": {
                        "name": "format",
                        "type": "string",
                        "doc": "The format of the output data"
                    },
                    "...": {
                        "name": "...",
                        "type": "any",
                        "doc": "The values to store as binary data"
                    }
                }
            },
            "unpack": {
                "name": "unpack",
                "type": "function",
                "doc": "Unpacks values from a binary string using the specified format. (CC:T 1.91+)",
                "returns": "any...",
                "args": {
                    "format": {
                        "name": "format",
                        "type": "string",
                        "doc": "The format of the binary data string"
                    },
                    "packstr": {
                        "name": "packstr",
                        "type": "string",
                        "doc": "The data to unpack"
                    },
                    "[n]": {
                        "name": "[n]",
                        "type": "number",
                        "doc": "The index in the data string to start from"
                    }
                }
            },
            "packsize": {
                "name": "packsize",
                "type": "function",
                "doc": "Returns the number of bytes used for a specific format string. (CC:T 1.91+)",
                "returns": "number",
                "args": {
                    "format": {
                        "name": "format",
                        "type": "string",
                        "doc": "THe format to get the size of"
                    }
                }
            }
        }
    },
    "table": {
        "name": "table",
        "type": "field",
        "inherits": [],
        "doc": "Default Lua table API",
        "properties": {
            "concat": {
                "name": "concat",
                "type": "function",
                "doc": "Combines values in a table into a single string, with an optional separator between each value.",
                "returns": "string",
                "args": {
                    "table": {
                        "name": "table",
                        "type": "table",
                        "doc": "The table to concatenate"
                    },
                    "[sep]": {
                        "name": "[sep]",
                        "type": "any",
                        "doc": "A separator to insert between every value (optional)"
                    },
                    "[i]": {
                        "name": "[i]",
                        "type": "number",
                        "doc": "The first index (optional)"
                    },
                    "[j]": {
                        "name": "[j]",
                        "type": "number",
                        "doc": "The last index (optional)"
                    }
                }
            },
            "insert": {
                "name": "insert",
                "type": "function",
                "doc": "Inserts a value at a position or the end.",
                "returns": "nil",
                "args": {
                    "table": {
                        "name": "table",
                        "type": "table",
                        "doc": "The table to use"
                    },
                    "[pos]": {
                        "name": "[pos]",
                        "type": "number",
                        "doc": "The position to place the value at"
                    },
                    "value": {
                        "name": "value",
                        "type": "any",
                        "doc": "The value to insert"
                    }
                }
            },
            "maxn": {
                "name": "maxn",
                "type": "function",
                "doc": "Returns the largest numerical index in a table.",
                "returns": "number",
                "args": {
                    "table": {
                        "name": "table",
                        "type": "table",
                        "doc": "The table to use"
                    }
                }
            },
            "remove": {
                "name": "remove",
                "type": "function",
                "doc": "Removes a value from a table at a position.",
                "returns": "any",
                "args": {
                    "table": {
                        "name": "table",
                        "type": "table",
                        "doc": "The table to use"
                    },
                    "[pos]": {
                        "name": "[pos]",
                        "type": "number",
                        "doc": "The position to remove the value at"
                    }
                }
            },
            "sort": {
                "name": "sort",
                "type": "function",
                "doc": "Sorts a table by value, using a function if provided.",
                "returns": "nil",
                "args": {
                    "table": {
                        "name": "table",
                        "type": "table",
                        "doc": "The table to use (modified)"
                    },
                    "[comp]": {
                        "name": "[comp]",
                        "type": "function",
                        "doc": "A function that determines if a value should come before another"
                    }
                }
            }
        }
    },
    "term": {
        "name": "term",
        "type": "field",
        "inherits": [],
        "doc": "Provides functions for writing to the terminal.",
        "properties": {
            "write": {
                "name": "write",
                "type": "function",
                "doc": "Writes text to the screen.",
                "returns": "nil",
                "args": {
                    "text": {
                        "name": "text",
                        "type": "string",
                        "doc": "The text to write"
                    }
                }
            },
            "blit": {
                "name": "blit",
                "type": "function",
                "doc": "Writes text to the screen using specific colors.",
                "returns": "nil",
                "args": {
                    "text": {
                        "name": "text",
                        "type": "string",
                        "doc": "The text to write"
                    },
                    "text colors": {
                        "name": "text colors",
                        "type": "string",
                        "doc": "The colors of the text"
                    },
                    "background colors": {
                        "name": "background colors",
                        "type": "string",
                        "doc": "The colors of the background"
                    }
                }
            },
            "clear": {
                "name": "clear",
                "type": "function",
                "doc": "Clears the screen.",
                "returns": "nil",
                "args": {}
            },
            "clearLine": {
                "name": "clearLine",
                "type": "function",
                "doc": "Clears the current line.",
                "returns": "nil",
                "args": {}
            },
            "getCursorPos": {
                "name": "getCursorPos",
                "type": "function",
                "doc": "Returns the current position of the cursor.",
                "returns": "number, number",
                "args": {}
            },
            "setCursorPos": {
                "name": "setCursorPos",
                "type": "function",
                "doc": "Sets the current position of the cursor.",
                "returns": "nil",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "The X position"
                    },
                    "y": {
                        "name": "y",
                        "type": "number",
                        "doc": "The Y position"
                    }
                }
            },
            "setCursorBlink": {
                "name": "setCursorBlink",
                "type": "function",
                "doc": "Sets whether the cursor should blink.",
                "returns": "nil",
                "args": {
                    "bool": {
                        "name": "bool",
                        "type": "boolean",
                        "doc": "Whether to blink the cursor"
                    }
                }
            },
            "getCursorBlink": {
                "name": "getCursorBlink",
                "type": "function",
                "doc": "Returns whether the cursor blinks.",
                "returns": "boolean",
                "args": {}
            },
            "isColor": {
                "name": "isColor",
                "type": "function",
                "doc": "Returns whether the terminal supports color.",
                "returns": "boolean",
                "args": {}
            },
            "isColour": {
                "name": "isColour",
                "type": "function",
                "doc": "Returns whether the terminal supports colour.",
                "returns": "boolean",
                "args": {}
            },
            "getSize": {
                "name": "getSize",
                "type": "function",
                "doc": "Returns the size of the terminal.",
                "returns": "number, number",
                "args": {}
            },
            "scroll": {
                "name": "scroll",
                "type": "function",
                "doc": "Scrolls the screen a number of lines.",
                "returns": "nil",
                "args": {
                    "n": {
                        "name": "n",
                        "type": "number",
                        "doc": "The number of lines to scroll"
                    }
                }
            },
            "redirect": {
                "name": "redirect",
                "type": "function",
                "doc": "Redirects the terminal output to another terminal.",
                "returns": "table",
                "args": {
                    "target": {
                        "name": "target",
                        "type": "table",
                        "doc": "The terminal to redirect to"
                    }
                }
            },
            "current": {
                "name": "current",
                "type": "function",
                "doc": "Returns the current terminal object. (1.6+)",
                "returns": "table",
                "args": {}
            },
            "native": {
                "name": "native",
                "type": "function",
                "doc": "Returns the original terminal object. (1.6+)",
                "returns": "table",
                "args": {}
            },
            "setTextColor": {
                "name": "setTextColor",
                "type": "function",
                "doc": "Sets the current text color.",
                "returns": "nil",
                "args": {
                    "color": {
                        "name": "color",
                        "type": "color",
                        "doc": "The color to set"
                    }
                }
            },
            "setTextColour": {
                "name": "setTextColour",
                "type": "function",
                "doc": "Sets the current text colour.",
                "returns": "nil",
                "args": {
                    "colour": {
                        "name": "colour",
                        "type": "color",
                        "doc": "The colour to set"
                    }
                }
            },
            "setBackgroundColor": {
                "name": "setBackgroundColor",
                "type": "function",
                "doc": "Sets the current background color.",
                "returns": "nil",
                "args": {
                    "color": {
                        "name": "color",
                        "type": "color",
                        "doc": "The color to set"
                    }
                }
            },
            "setBackgroundColour": {
                "name": "setBackgroundColour",
                "type": "function",
                "doc": "Sets the current background colour.",
                "returns": "nil",
                "args": {
                    "colour": {
                        "name": "colour",
                        "type": "color",
                        "doc": "The colour to set"
                    }
                }
            },
            "getTextColor": {
                "name": "getTextColor",
                "type": "function",
                "doc": "Gets the current text color. (1.74+)",
                "returns": "color",
                "args": {}
            },
            "getTextColour": {
                "name": "getTextColour",
                "type": "function",
                "doc": "Gets the current text colour. (1.74+)",
                "returns": "color",
                "args": {}
            },
            "getBackgroundColor": {
                "name": "getBackgroundColor",
                "type": "function",
                "doc": "Gets the current background color. (1.74+)",
                "returns": "color",
                "args": {}
            },
            "getBackgroundColour": {
                "name": "getBackgroundColour",
                "type": "function",
                "doc": "Gets the current background colour. (1.74+)",
                "returns": "color",
                "args": {}
            },
            "nativePaletteColor": {
                "name": "nativePaletteColor",
                "type": "function",
                "doc": "Returns the original RGB values of the specified color. (CC:T 1.81+)",
                "returns": "number, number, number",
                "args": {
                    "color": {
                        "name": "color",
                        "type": "color",
                        "doc": "The color to get the default for"
                    }
                }
            },
            "nativePaletteColour": {
                "name": "nativePaletteColour",
                "type": "function",
                "doc": "Returns the original RGB values of the specified colour. (CC:T 1.81+)",
                "returns": "number, number, number",
                "args": {
                    "color": {
                        "name": "colour",
                        "type": "color",
                        "doc": "The colour to get the default for"
                    }
                }
            }
        }
    },
    "textutils": {
        "name": "textutils",
        "type": "field",
        "inherits": [],
        "doc": "Formats and manipulates strings.",
        "properties": {
            "slowWrite": {
                "name": "slowWrite",
                "type": "function",
                "doc": "Writes text to the screen slowly.",
                "returns": "nil",
                "args": {
                    "text": {
                        "name": "text",
                        "type": "string",
                        "doc": "The text to write"
                    },
                    "rate": {
                        "name": "rate",
                        "type": "number",
                        "doc": "The number of characters to write per second"
                    }
                }
            },
            "slowPrint": {
                "name": "slowPrint",
                "type": "function",
                "doc": "Writes text to the screen slowly, with a newline.",
                "returns": "nil",
                "args": {
                    "text": {
                        "name": "text",
                        "type": "string",
                        "doc": "The text to write"
                    },
                    "rate": {
                        "name": "rate",
                        "type": "number",
                        "doc": "The number of characters to write per second"
                    }
                }
            },
            "formatTime": {
                "name": "formatTime",
                "type": "function",
                "doc": "Returns a string representing a Minecraft time in either 12-hour or 24-hour time.",
                "returns": "string",
                "args": {
                    "time": {
                        "name": "time",
                        "type": "number",
                        "doc": "The time to format"
                    },
                    "[twentyFourHour]": {
                        "name": "[twentyFourHour]",
                        "type": "boolean",
                        "doc": "Whether to display the time in 24-hour time (optional)"
                    }
                }
            },
            "tabulate": {
                "name": "tabulate",
                "type": "function",
                "doc": "Prints rows of values in an ordered form, changing the text color if one is encountered.",
                "returns": "nil",
                "args": {
                    "...": {
                        "name": "...",
                        "type": "table/color",
                        "doc": "The rows to display or the color of the text"
                    }
                }
            },
            "pagedTabulate": {
                "name": "tabulate",
                "type": "function",
                "doc": "Prints rows of values in an ordered form, changing the text color if one is encountered (paged).",
                "returns": "nil",
                "args": {
                    "...": {
                        "name": "...",
                        "type": "table/color",
                        "doc": "The rows to display or the color of the text"
                    }
                }
            },
            "pagedPrint": {
                "name": "pagedPrint",
                "type": "function",
                "doc": "Prints text, but waits to scroll if too much text is displayed.",
                "returns": "number",
                "args": {
                    "text": {
                        "name": "text",
                        "type": "string",
                        "doc": "The text to write"
                    },
                    "[freeLines]": {
                        "name": "[freeLines]",
                        "type": "number",
                        "doc": "The number of lines to write before waiting (optional)"
                    }
                }
            },
            "serialize": {
                "name": "serialize",
                "type": "function",
                "doc": "Converts a value into a string representation.",
                "returns": "string",
                "args": {
                    "data": {
                        "name": "data",
                        "type": "any",
                        "doc": "The value to convert"
                    }
                }
            },
            "serialise": {
                "name": "serialise",
                "type": "function",
                "doc": "Converts a value into a string representation. (1.6+)",
                "returns": "string",
                "args": {
                    "data": {
                        "name": "data",
                        "type": "any",
                        "doc": "The value to convert"
                    }
                }
            },
            "unserialize": {
                "name": "unserialize",
                "type": "function",
                "doc": "Converts a string representation into a value.",
                "returns": "any",
                "args": {
                    "data": {
                        "name": "serializedData",
                        "type": "string",
                        "doc": "The value to convert"
                    }
                }
            },
            "unserialise": {
                "name": "unserialise",
                "type": "function",
                "doc": "Converts a string representation into a value. (1.6+)",
                "returns": "any",
                "args": {
                    "data": {
                        "name": "serializedData",
                        "type": "string",
                        "doc": "The value to convert"
                    }
                }
            },
            "serializeJSON": {
                "name": "serialize",
                "type": "function",
                "doc": "Converts a value into a JSON string. (1.7+)",
                "returns": "string",
                "args": {
                    "data": {
                        "name": "data",
                        "type": "any",
                        "doc": "The value to convert"
                    },
                    "[unquote keys]": {
                        "name": "[unquote keys]",
                        "type": "boolean",
                        "doc": "Whether to strip the quotation marks from keys (for MC commands)"
                    }
                }
            },
            "serialiseJSON": {
                "name": "serialise",
                "type": "function",
                "doc": "Converts a value into a JSON string. (1.7+)",
                "returns": "string",
                "args": {
                    "data": {
                        "name": "data",
                        "type": "any",
                        "doc": "The value to convert"
                    },
                    "[unquote keys]": {
                        "name": "[unquote keys]",
                        "type": "boolean",
                        "doc": "Whether to strip the quotation marks from keys (for MC commands)"
                    }
                }
            },
            "unserializeJSON": {
                "name": "unserializeJSON",
                "type": "function",
                "doc": "Converts a JSON string into a Lua value. (CC:T 1.87+)",
                "returns": "any",
                "args": {
                    "string": {
                        "name": "string",
                        "type": "string",
                        "doc": "The JSON string to decode"
                    },
                    "[options]": {
                        "name": "[options]",
                        "type": "table",
                        "doc": "A table with any of the fields 'nbt_style' and 'parse_null'"
                    }
                }
            },
            "unserialiseJSON": {
                "name": "unserialiseJSON",
                "type": "function",
                "doc": "Converts a JSON string into a Lua value. (CC:T 1.87+)",
                "returns": "any",
                "args": {
                    "string": {
                        "name": "string",
                        "type": "string",
                        "doc": "The JSON string to decode"
                    },
                    "[options]": {
                        "name": "[options]",
                        "type": "table",
                        "doc": "A table with any of the fields 'nbt_style' and 'parse_null'"
                    }
                }
            },
            "empty_json_array": {
                "name": "empty_json_array",
                "type": "table",
                "doc": "A table representing an empty JSON array."
            },
            "json_null": {
                "name": "json_null",
                "type": "table",
                "doc": "A table representing the JSON null value."
            },
            "urlEncode": {
                "name": "urlEncode",
                "type": "function",
                "doc": "Makes a string safe for a URL.",
                "returns": "string",
                "args": {
                    "urlUnsafeString": {
                        "name": "urlUnsafeString",
                        "type": "string",
                        "doc": "The string to encode"
                    }
                }
            },
            "complete": {
                "name": "complete",
                "type": "function",
                "doc": "Returns a list of suffixes that could be combined with a prefix in an environment. (1.74+)",
                "returns": "table",
                "args": {
                    "partial name": {
                        "name": "partial name",
                        "type": "string",
                        "doc": "Part of a variable name"
                    },
                    "[environment]": {
                        "name": "[environment]",
                        "type": "table",
                        "doc": "The environment to search in (optional)"
                    }
                }
            }
        }
    },
    "vector": {
        "name": "vector",
        "type": "field",
        "inherits": [],
        "doc": "Creates vector objects.",
        "properties": {
            "new": {
                "name": "new",
                "type": "function",
                "doc": "Creates a new vector.",
                "returns": "table",
                "args": {
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "The X coordinate"
                    },
                    "y": {
                        "name": "y",
                        "type": "number",
                        "doc": "The Y coordinate"
                    },
                    "z": {
                        "name": "z",
                        "type": "number",
                        "doc": "The Z coordinate"
                    }
                }
            }
        }
    },
    "window": {
        "name": "window",
        "type": "field",
        "inherits": [],
        "doc": "Creates window objects.",
        "properties": {
            "create": {
                "name": "create",
                "type": "function",
                "doc": "Creates a new window.",
                "returns": "table",
                "args": {
                    "parentTerm": {
                        "name": "parentTerm",
                        "type": "table",
                        "doc": "The parent terminal of the window (use term.native() instead of term)"
                    },
                    "x": {
                        "name": "x",
                        "type": "number",
                        "doc": "The X coordinate"
                    },
                    "y": {
                        "name": "y",
                        "type": "number",
                        "doc": "The Y coordinate"
                    },
                    "width": {
                        "name": "width",
                        "type": "number",
                        "doc": "The width"
                    },
                    "height": {
                        "name": "height",
                        "type": "number",
                        "doc": "The height"
                    },
                    "[visible]": {
                        "name": "[visible]",
                        "type": "boolean",
                        "doc": "Whether the window is visible by default (optional)"
                    }
                }
            }
        }
    },
    "turtle": {
        "name": "turtle",
        "type": "field",
        "inherits": [],
        "doc": "The Turtle API is used to work with your Turtles.",
        "properties": {
            "forward": {
                "name": "forward",
                "type": "function",
                "doc": "Try to move the turtle forward.",
                "returns": "boolean, [string]",
                "args": {}
            },
            "back": {
                "name": "back",
                "type": "function",
                "doc": "Try to move the turtle backward.",
                "returns": "boolean, [string]",
                "args": {}
            },
            "up": {
                "name": "up",
                "type": "function",
                "doc": "Try to move the turtle up.",
                "returns": "boolean, [string]",
                "args": {}
            },
            "down": {
                "name": "down",
                "type": "function",
                "doc": "Try to move the turtle down.",
                "returns": "boolean, [string]",
                "args": {}
            },
            "turnLeft": {
                "name": "turnLeft",
                "type": "function",
                "doc": "Turn the turtle left.",
                "returns": "boolean",
                "args": {}
            },
            "turnRight": {
                "name": "turnRight",
                "type": "function",
                "doc": "Turn the turtle right.",
                "returns": "boolean",
                "args": {}
            },
            "select": {
                "name": "select",
                "type": "function",
                "doc": "Make the turtle select slot slotNum.",
                "returns": "boolean",
                "args": {
                    "slotNum": {
                        "name": "slotNum",
                        "type": "number",
                        "doc": "1 is top left, 16 (9 in 1.33 and earlier) is bottom right"
                    }
                }
            },
            "getSelectedSlot": {
                "name": "getSelectedSlot",
                "type": "function",
                "doc": "Indicates the currently selected inventory slot. (1.6+)",
                "returns": "number",
                "args": {}
            },
            "getItemCount": {
                "name": "getItemCount",
                "type": "function",
                "doc": "Counts how many items are in the currently selected slot or, if specified, slotNum slot.",
                "returns": "number",
                "args": {
                    "[slotNum]": {
                        "name": "[slotNum]",
                        "type": "number",
                        "doc": "1 is top left, 16 (9 in 1.33 and earlier) is bottom right (optional)"
                    }
                }
            },
            "getItemSpace": {
                "name": "getItemSpace",
                "type": "function",
                "doc": "Counts how many remaining items you need to fill the stack in the currently selected slot or, if specified, slotNum slot.",
                "returns": "number",
                "args": {
                    "[slotNum]": {
                        "name": "[slotNum]",
                        "type": "number",
                        "doc": "1 is top left, 16 (9 in 1.33 and earlier) is bottom right (optional)"
                    }
                }
            },
            "getItemDetail": {
                "name": "getItemDetail",
                "type": "function",
                "doc": "Returns the ID string, count and damage values of currently selected slot or, if specified, slotNum slot. (1.64+)",
                "returns": "table/nil",
                "args": {
                    "[slotNum]": {
                        "name": "[slotNum]",
                        "type": "number",
                        "doc": "1 is top left, 16 (9 in 1.33 and earlier) is bottom right (optional)"
                    }
                }
            },
            "equipLeft": {
                "name": "equipLeft",
                "type": "function",
                "doc": "Attempts to equip an item in the current slot to the turtle's left side, switching the previously equipped item back into the inventory. (1.6+)",
                "returns": "boolean",
                "args": {}
            },
            "equipRight": {
                "name": "equipRight",
                "type": "function",
                "doc": "Attempts to equip an item in the current slot to the turtle's right side, switching the previously equipped item back into the inventory. (1.6+)",
                "returns": "boolean",
                "args": {}
            },
            "dig": {
                "name": "dig",
                "type": "function",
                "doc": "Breaks and sucks the block in front. With hoe: tills the dirt in front of it.",
                "returns": "boolean, [string]",
                "args": {
                    "[toolSide]": {
                        "name": "[toolSide]",
                        "type": "string",
                        "doc": "left/right (optional)"
                    }
                }
            },
            "digUp": {
                "name": "digUp",
                "type": "function",
                "doc": "Breaks and sucks the block above.",
                "returns": "boolean, [string]",
                "args": {
                    "[toolSide]": {
                        "name": "[toolSide]",
                        "type": "string",
                        "doc": "left/right (optional)"
                    }
                }
            },
            "digDown": {
                "name": "digDown",
                "type": "function",
                "doc": "Breaks and sucks the block below. With hoe: tills the dirt beneath the space below it.",
                "returns": "boolean, [string]",
                "args": {
                    "[toolSide]": {
                        "name": "[toolSide]",
                        "type": "string",
                        "doc": "left/right (optional)"
                    }
                }
            },
            "place": {
                "name": "place",
                "type": "function",
                "doc": "Places a block of the selected slot in front. Engrave signText on signs if provided. Collects water or lava if the currently selected slot is an empty bucket. (1.4+)",
                "returns": "boolean, [string]",
                "args": {                    
                    "[signText]": {
                    "name": "[signText]",
                    "type": "string",
                    "doc": "If you're placing a sign and signText is given, then the turtle places the sign putting the text of signText into it. Each line of the sign can be separated using newline (\n) character (optional)"
                }}
            },
            "placeUp": {
                "name": "placeUp",
                "type": "function",
                "doc": "Places a block of the selected slot above. Collects water or lava if the currently selected slot is an empty bucket.",
                "returns": "boolean, [string]",
                "args": {}
            },
            "placeDown": {
                "name": "placeDown",
                "type": "function",
                "doc": "Places a block of the selected slot below. Collects water or lava if the currently selected slot is an empty bucket.",
                "returns": "boolean, [string]",
                "args": {}
            },
            "attack": {
                "name": "attack",
                "type": "function",
                "doc": "Attacks in front of the turtle. (1.4+)",
                "returns": "boolean, [string]",
                "args": {
                    "[toolSide]": {
                        "name": "[toolSide]",
                        "type": "string",
                        "doc": "left/right (optional)"
                    }       
                }
            },
            "attackUp": {
                "name": "attackUp",
                "type": "function",
                "doc": "Attacks above the turtle. (1.4+)",
                "returns": "boolean, [string]",
                "args": {
                    "[toolSide]": {
                        "name": "[toolSide]",
                        "type": "string",
                        "doc": "left/right (optional)"
                    }
                }
            },
            "attackDown": {
                "name": "attackDown",
                "type": "function",
                "doc": "Attacks under the turtle. (1.4+)",
                "returns": "boolean, [string]",
                "args": {
                    "[toolSide]": {
                        "name": "[toolSide]",
                        "type": "string",
                        "doc": "left/right (optional)"
                    }
                }
            },
            "detect": {
                "name": "detect",
                "type": "function",
                "doc": "Detects if there is a block in front. Does not detect mobs.",
                "returns": "boolean",
                "args": {}
            },
            "detectUp": {
                "name": "detectUp",
                "type": "function",
                "doc": "Detects if there is a block above.",
                "returns": "boolean",
                "args": {}
            },
            "detectDown": {
                "name": "detectDown",
                "type": "function",
                "doc": "Detects if there is a block below.",
                "returns": "boolean",
                "args": {}
            },
            "compare": {
                "name": "compare",
                "type": "function",
                "doc": "Detects if the block in front is the same as the one in the currently selected slot. (1.31+)",
                "returns": "boolean",
                "args": {}
            },
            "compareUp": {
                "name": "compareUp",
                "type": "function",
                "doc": "Detects if the block above is the same as the one in the currently selected slot.",
                "returns": "boolean",
                "args": {}
            },
            "compareDown": {
                "name": "compareDown",
                "type": "function",
                "doc": "Detects if the block below is the same as the one in the currently selected slot",
                "returns": "boolean",
                "args": {}
            },
            "inspect": {
                "name": "inspect",
                "type": "function",
                "doc": "Returns the ID string and metadata of the block in front of the Turtle. (1.64+)",
                "returns": "boolean, table/string",
                "args": {}
            },
            "inspectUp": {
                "name": "inspectUp",
                "type": "function",
                "doc": "Returns the ID string and metadata of the block above the Turtle. (1.64+)",
                "returns": "boolean, table/string",
                "args": {}
            },
            "inspectDown": {
                "name": "inspectDown",
                "type": "function",
                "doc": "Returns the ID string and metadata of the block below the Turtle. (1.64+)",
                "returns": "boolean, table/string",
                "args": {}
            },
            "compareTo": {
                "name": "compareTo",
                "type": "function",
                "doc": "Compare the current selected slot and the given slot to see if the items are the same. Returns true if they are the same, false if not. (1.4+)",
                "returns": "boolean",
                "args": {
                    "[slotNum]": {
                        "name": "[slotNum]",
                        "type": "number",
                        "doc": "1 is top left, 16 (9 in 1.33 and earlier) is bottom right (optional)"
                    }
                }
            },
            "transferTo": {
                "name": "transferTo",
                "type": "function",
                "doc": "Transfers quantity items from the selected slot to slot. If quantity isn't specified, will attempt to transfer everything in the selected slot to slot. (1.45+)",
                "returns": "boolean, [string]",
                "args": {
                    "slotNum": {
                        "name": "slotNum",
                        "type": "number",
                        "doc": "1 is top left, 16 (9 in 1.33 and earlier) is bottom right"
                    },
                    "[quantity]": {
                        "name": "[quantity]",
                        "type": "number",
                        "doc": "Transfers [quantity] items from the selected slot to the specified slot (optional)"
                    }
                }
            },
            "drop": {
                "name": "drop",
                "type": "function",
                "doc": "Drops all items in the selected slot, or specified, drops [count] items.  /  [>= 1.4 only:] If there is a inventory on the side (i.e in front of the turtle) it will try to place into the inventory, returning false if the inventory is full.",
                "returns": "boolean, [string]",
                "args": {
                    "[count]": {
                        "name": "[count]",
                        "type": "number",
                        "doc": "Drops [count] items (optional)"
                    }
                }
            },
            "dropUp": {
                "name": "dropUp",
                "type": "function",
                "doc": "Drops all items in the selected slot, or specified, drops [count] items.  /  [>= 1.4 only:] If there is a inventory on the side (i.e above the turtle) it will try to place into the inventory, returning false if the inventory is full. (1.4+)",
                "returns": "boolean, [string]",
                "args": {
                    "[count]": {
                        "name": "[count]",
                        "type": "number",
                        "doc": "Drops [count] items (optional)"
                    }
                }
            },
            "dropDown": {
                "name": "dropDown",
                "type": "function",
                "doc": "Drops all items in the selected slot, or specified, drops [count] items.  /  [>= 1.4 only:] If there is a inventory on the side (i.e below the turtle) it will try to place into the inventory, returning false if the inventory is full. If above a furnace, will place item in the top slot. (1.4+)",
                "returns": "boolean, [string]",
                "args": {
                    "[count]": {
                        "name": "[count]",
                        "type": "number",
                        "doc": "Drops [count] items (optional)"
                    }
                }
            },
            "suck": {
                "name": "suck",
                "type": "function",
                "doc": "Picks up an item stack of any number, from the ground or an inventory in front of the turtle, then places it in the selected slot. If the turtle can't pick up the item, the function returns false (1.4+). The [amount] parameter requires ComputerCraft 1.6 or later",
                "returns": "boolean, [string]",
                "args": {
                    "[amount]": {
                        "name": "[amount]",
                        "type": "number",
                        "doc": "The turtle will attempt to pick up at most the specified number of items (optional)"
                    }
                }
            },
            "suckUp": {
                "name": "suckUp",
                "type": "function",
                "doc": "Picks up an item stack of any number, from the ground or an inventory above the turtle, then places it in the selected slot. If the turtle can't pick up the item, the function returns false (1.4+). The [amount] parameter requires ComputerCraft 1.6 or later",
                "returns": "boolean",
                "args": {
                    "[amount]": {
                        "name": "[amount]",
                        "type": "number",
                        "doc": "The turtle will attempt to pick up at most the specified number of items (optional)"
                    }
                }
            },
            "suckDown": {
                "name": "suckDown",
                "type": "function",
                "doc": "Picks up an item stack of any number, from the ground or an inventory below the turtle, then places it in the selected slot. If the turtle can't pick up the item, the function returns false (1.4+). The [amount] parameter requires ComputerCraft 1.6 or later",
                "returns": "boolean",
                "args": {
                    "[amount]": {
                        "name": "[amount]",
                        "type": "number",
                        "doc": "The turtle will attempt to pick up at most the specified number of items (optional)"
                    }
                }
            },
            "getFuelLevel": {
                "name": "getFuelLevel",
                "type": "function",
                "doc": "Returns the current fuel level of the turtle, this is the number of blocks the turtle can move. If turtleNeedFuel = 0 then it returns unlimited.(1.4+)",
                "returns": "number/string",
                "args": {}
            },
            "getFuelLimit": {
                "name": "getFuelLimit",
                "type": "function",
                "doc": "Returns the maximum amount of fuel a turtle can store - by default, 20,000 for regular turtles, 100,000 for advanced. If turtleNeedFuel = 0 then it returns unlimited. (1.6+)",
                "returns": "number/string",
                "args": {}
            },
            "refuel": {
                "name": "refuel",
                "type": "function",
                "doc": "If the current selected slot contains a fuel item, it will consume it to give the turtle the ability to move. Added in 1.4 and is only needed in needfuel mode. If the current slot doesn't contain a fuel item, it returns false. If a [quantity] is specified, it will refuel only up to that many items, otherwise, it will consume all the items in the slot. (1.4+)",
                "returns": "boolean",
                "args": {
                    "[quantity]": {
                        "name": "[quantity]",
                        "type": "number",
                        "doc": "If a [quantity] is specified, it will refuel only up to that many items, otherwise, it will consume all the items in the slot (optional)"
                    }
                }
            },
            "craft": {
                "name": "craft",
                "type": "function",
                "doc": "(Only Crafty Turtle) Craft items using ingredients anywhere in the turtle's inventory and place results in the active slot. If a quantity is specified, it will craft only up to that many items, otherwise, it will craft as many of the items as possible. (1.4+)",
                "returns": "boolean",
                "args": {
                    "[quantity]": {
                        "name": "[quantity]",
                        "type": "number",
                        "doc": "A parameter can also be supplied to specify the quantity of items to craft. If the quantity specified is 0, will return true if a valid recipe has been found in the turtle's inventory, and false otherwise (optional)"
                    }
                }
            }
        }
    }
}
